{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/calendar-popover.js","js/dist/components/js/dist/components/popover.js","js/dist/components/js/dist/helpers/animation/request.js","js/dist/components/js/dist/helpers/animation/scroll-to.js","js/dist/components/js/dist/helpers/animation/tween.js","js/dist/components/js/dist/helpers/date/date.js","js/dist/components/js/dist/helpers/date/parse-format.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/breakpoint.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/offset.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/dom/trigger-event.js","js/dist/components/js/dist/helpers/form/build-select.js","js/dist/components/js/dist/helpers/manipulation/append-children.js","js/dist/components/js/dist/helpers/position/affix.js","js/dist/components/js/dist/helpers/position/box-position.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/get-sibling-after.js","js/dist/components/js/dist/helpers/traversal/get-sibling-before.js","js/dist/components/js/dist/helpers/traversal/has-parent.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/debounce.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/pad.js","js/dist/components/js/dist/helpers/util/range.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxvmeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"calendar-popover.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _popover = require('./popover');\n\nvar _popover2 = _interopRequireDefault(_popover);\n\nvar _parseFormat = require('../helpers/date/parse-format');\n\nvar _parseFormat2 = _interopRequireDefault(_parseFormat);\n\nvar _date = require('../helpers/date/date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _buildSelect = require('../helpers/form/build-select');\n\nvar _buildSelect2 = _interopRequireDefault(_buildSelect);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _appendChildren = require('../helpers/manipulation/append-children');\n\nvar _appendChildren2 = _interopRequireDefault(_appendChildren);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _triggerEvent = require('../helpers/dom/trigger-event');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _breakpoint = require('../helpers/dom/breakpoint');\n\nvar _scrollTo = require('../helpers/animation/scroll-to');\n\nvar _scrollTo2 = _interopRequireDefault(_scrollTo);\n\nvar _getSiblingBefore = require('../helpers/traversal/get-sibling-before');\n\nvar _getSiblingBefore2 = _interopRequireDefault(_getSiblingBefore);\n\nvar _getSiblingAfter = require('../helpers/traversal/get-sibling-after');\n\nvar _getSiblingAfter2 = _interopRequireDefault(_getSiblingAfter);\n\nvar _range = require('../helpers/util/range');\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nalendar Popover\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Create a calendar from which dates can be selected.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new CalendarPopover(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/calendar-popover.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\nvar domDateFormat = 'YYYY-MM-DD';\nvar parsedDomFormat = (0, _parseFormat2.default)(domDateFormat);\n\nfunction createDefaultElement() {\n  var el = document.createElement('span');\n  el.className = 'spark-input spark-date';\n  el.innerHTML = '<input class=\"spark-input__field\" type=\"date\"><span class=\"spark-label\"></span>';\n  return el;\n}\n\n/**\n * Parse the proper params for initialization\n * @param  {Element} el\n * @param  {Object} params\n * @return {Objec}\n */\nfunction parseInitParams(el, params) {\n\n  // If the first element is an array or array-like (NodeList),\n  // we will be working with a range.\n  if (el && el.hasOwnProperty('length')) {\n    params.els = el;\n  }\n  // If the first argument is a plain object, create a default element\n  // since the user MUST provide additional params but the element\n  // is optional. Doing it this way to keep the arity the same\n  // as other components.\n  else if (!(el instanceof HTMLElement)) {\n      params = el || {};\n      params.els = [createDefaultElement()];\n    }\n    // A single element is passed.\n    else {\n        params.els = [el];\n      }\n\n  params.visibleCounts = params.visibleCounts || (params.visibleCount ? [params.visibleCount] : null);\n  params.mins = params.mins || (params.min ? [params.min] : []);\n  params.maxes = params.maxes || (params.max ? [params.max] : []);\n  params.values = params.values || (params.value ? [params.value] : []);\n\n  return params;\n}\n\nvar CalendarPopover = function (_BaseComponent) {\n  _inherits(CalendarPopover, _BaseComponent);\n\n  /**\n   * Calendar Popover constructor\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  function CalendarPopover(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CalendarPopover);\n\n    params = parseInitParams(el, params);\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    // Create a calendar element if we weren't passed one.\n    (_this.calendarEl ? noop : _this._createCalendar).call(_this);\n    _this._cacheCalendarElements();\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._initDatesToShow();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  CalendarPopover.prototype.update = function update(el) {\n\n    if (el) {\n      this._removeEventListeners();\n      this.els = el instanceof Array ? el : [el];\n      this._cacheElements();\n      this._addEventListeners();\n    }\n\n    this._initDatesToShow();\n\n    if (this.activeIndex !== null) {\n      this.render();\n      this._checkSize();\n    }\n\n    return this;\n  };\n\n  /**\n   * Open the calendar widget.\n   * @param {Number} index Optional The index of the element to tie actions to\n   * @param {Object} params Optional\n   */\n\n\n  CalendarPopover.prototype.open = function open() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._isDisabled[index]) {\n      return this;\n    }\n\n    this._unfillToggle();\n\n    // Allow for only params to be passed\n    if ((typeof index === 'undefined' ? 'undefined' : _typeof(index)) === 'object') {\n      params = index;\n      index = 0;\n    }\n\n    // Already open\n    if (this.activeIndex === index) {\n      return this;\n    }\n\n    // We have an already active item, close it\n    if (this.activeIndex !== null) {\n      this._deactivateElement(this.activeIndex);\n    }\n\n    // Clear any timers which may be running to close or open this\n    clearTimeout(this._openCloseTimer);\n\n    // Set the new index\n    this.activeIndex = index;\n\n    // If we don't have a popover yet, create it.\n    if (!this.popover) {\n      this._createPopover();\n    }\n\n    // Get the list of dates to show for this view.\n    this._initDatesToShow();\n\n    // Ensure the cached values are in line with the input values.\n    this.updateValues();\n\n    // Create a calendar or calendars inside the popover\n    this.render({\n      clearCache: true\n    });\n\n    // Finally, show the popover after a delay or on the next tick.\n    this._openCloseTimer = setTimeout(function () {\n      this.popover.open({\n        affixTo: this.els[index].querySelector('.spark-date__calendar-toggle')\n      });\n    }.bind(this), params.delay || 0);\n\n    // Activate the corresponding element\n    this._activateElement(index);\n\n    return this;\n  };\n\n  /**\n   * Close the calendar widget.\n   * @param {Object} params\n   */\n\n\n  CalendarPopover.prototype.close = function close(params) {\n\n    this._unfillToggle();\n\n    params = params || {};\n\n    // Can't close if we aren't or haven't yet opened.\n    if (this.activeIndex === null || !this.popover) {\n      return this;\n    }\n\n    // Deactive the corresponding element\n    this._deactivateElement(this.activeIndex);\n\n    // Clear any existing close or open events which are queued\n    clearTimeout(this._openCloseTimer);\n\n    // Close after a delay, or on the next tick\n    this.activeIndex = null;\n    this._openCloseTimer = setTimeout(function () {\n      this.popover.close();\n    }.bind(this), params.delay || 0);\n  };\n\n  /**\n   * Get the value.\n   * @param {Number|Element} index Optional\n   * @return {Mixed}\n   */\n\n\n  CalendarPopover.prototype.getValue = function getValue(index) {\n    return this.values[index || 0];\n  };\n\n  /**\n   * Set the date for a given element.\n   * @param {String|Object} value\n   * @param {Number|Element} index\n   * @param {Boolean} skipRangeCheck Optional Don't check for sequential range values.\n   */\n\n\n  CalendarPopover.prototype.setValue = function setValue(value, index, skipRangeCheck) {\n\n    var obj = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value : parsedDomFormat.getValues(value);\n    var el = void 0;\n\n    // If we are passed an element instead of an index, use that.\n    if (index instanceof HTMLElement) {\n      el = index;\n      index = this.inputEls.indexOf(el);\n    }\n    // Otherwise, find the element in our list.\n    else {\n        index = index || 0;\n        el = this.inputEls[index];\n      }\n\n    // Update the stored value\n    this.values[index] = obj;\n\n    // If we are working with a range, make sure that the values are in order.\n    if (value) {\n      this._checkValues(index, skipRangeCheck);\n    }\n\n    // Set the value on the input element. Make sure we don't get into an infinite\n    // loop since we listen to the change event on the input. We have to trigger it\n    // so that other components listening to it get the update.\n    el.value = value && obj === value ? parsedDomFormat.getString(value) : value || '';\n\n    this._inputsChanging = this._inputsChanging || [];\n    if (this._inputsChanging.indexOf(index) === -1) {\n      this._inputsChanging.push(index);\n\n      (0, _triggerEvent2.default)(el, 'change');\n      (this.onChange || noop)(el, el.value, this);\n\n      var pos = this._inputsChanging.indexOf(index);\n      this._inputsChanging.splice(pos, 1);\n    }\n\n    this.render({\n      clearCache: true\n    });\n\n    return this;\n  };\n\n  /**\n   * Clear the selected values.\n   */\n\n\n  CalendarPopover.prototype.clearValues = function clearValues() {\n\n    var els = this.inputEls;\n    var i = 0;\n    var len = els.length;\n\n    for (; i < len; i++) {\n      this.clearValue(i);\n    }\n\n    return this;\n  };\n\n  /**\n   * Clear the selected value.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype.clearValue = function clearValue() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    this.values = this.values || [];\n    if (!this.inputEls[index]) throw new Error('Cannot clear value at index ' + index + '. No input element exists with that index!');\n    this.values[index] = this.inputEls[index].value = null;\n    return this;\n  };\n\n  /**\n   * Take the date values from the inputs and set them as dates on the calendar.\n   */\n\n\n  CalendarPopover.prototype.updateValues = function updateValues() {\n\n    var els = this.inputEls;\n    var i = 0;\n    var len = els.length;\n\n    for (; i < len; i++) {\n      this.updateValue(i);\n    }\n\n    return this;\n  };\n\n  /**\n   * Take the date values from the inputs and set them as dates on the calendar.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype.updateValue = function updateValue() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    this.values = this.values || [];\n    if (!this.inputEls[index]) throw new Error('Cannot update value at index ' + index + '. No input element exists with that index!');\n    this.values[index] = this.inputEls[index].value ? parsedDomFormat.getValues(this.inputEls[index].value) : null;\n    return this;\n  };\n\n  /**\n   * Disable the calendar functionality.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype.disable = function disable(index) {\n\n    var i = index || 0;\n    var len = index !== undefined ? index + 1 : this.els.length;\n    var toggle = void 0;\n\n    for (; i < len; i++) {\n      this._isDisabled[i] = true;\n      this.els[i].setAttribute('disabled', '');\n      toggle = this.els[i].querySelector('.spark-date__calendar-toggle');\n      if (toggle) toggle.setAttribute('disabled', '');\n    }\n\n    this.close();\n\n    return this;\n  };\n\n  /**\n   * Enable the calendar functionality.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype.enable = function enable(index) {\n\n    var i = index || 0;\n    var len = index !== undefined ? index + 1 : this.els.length;\n    var toggle = void 0;\n\n    for (; i < len; i++) {\n      this._isDisabled[i] = false;\n      this.els[i].removeAttribute('disabled', '');\n      toggle = this.els[i].querySelector('.spark-date__calendar-toggle');\n      if (toggle) toggle.removeAttribute('disabled');\n    }\n\n    return this;\n  };\n\n  /**\n   * Render the calendar or calendars into the popover.\n   * @param {Object} params\n   */\n\n\n  CalendarPopover.prototype.render = function render(params) {\n\n    params = params || {};\n\n    // If we don't have a popover yet, create it.\n    if (!this.popover) {\n      this._createPopover();\n    }\n\n    var content = void 0;\n\n    // Clear the cache so that we don't show out-of-date values.\n    if (params.clearCache) {\n      this._renderCache = {};\n    }\n\n    // Create the visible days, weeks, months or years\n    if (this.viewRange === 'year') content = this._renderYears();else if (this.viewRange === 'week') content = this._renderWeeks();else if (this.viewRange === 'day') content = this._renderDays();else content = this._renderMonths();\n\n    this._insertContent(content, params);\n\n    // Update attributes\n    this._updateAttributes();\n\n    return this;\n  };\n\n  /**\n   * Cleans up event listeners and removes helpers.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  CalendarPopover.prototype.remove = function remove(leaveElement) {\n    this.popover.remove();\n    return _BaseComponent.prototype.remove.call(this, leaveElement);\n  };\n\n  /**\n   * Move to the next set of dates.\n   */\n\n\n  CalendarPopover.prototype.next = function next() {\n    if (this._atMax) return this;\n    this._setDatesToShow(1);\n    this.render({\n      append: 1\n    });\n    return this;\n  };\n\n  /**\n   * Move to the previous set of dates.\n   */\n\n\n  CalendarPopover.prototype.previous = function previous() {\n    if (this._atMin) return this;\n    this._setDatesToShow(-1);\n    this.render({\n      prepend: 1\n    });\n    return this;\n  };\n\n  /**\n   * Show a specific date on the calendar.\n   * @param {Object} params\n   */\n\n\n  CalendarPopover.prototype.showDate = function showDate(params) {\n\n    // Open if we're closed.\n    if (this.activeIndex === null) {\n      this.open();\n    }\n\n    var month = params.month || null;\n    var year = params.year || null;\n    var day = params.day || null;\n\n    // Nothing to do.\n    if (!month && !year && !day) {\n      return this;\n    }\n\n    var showing = this._datesToShow[this.activeIndex].clone();\n    var noun = this.viewRange.charAt(0).toUpperCase() + this.viewRange.slice(1);\n\n    // Only change the values we were given\n    if (year) {\n      showing.year = year;\n    }\n    if (month) {\n      showing.month = month;\n    }\n    if (day) {\n      showing.day = day;\n    }\n\n    // Check min\n    var min = this.mins[this.activeIndex];\n    if (min && showing['before' + noun](min)) {\n      showing = min.clone();\n    }\n\n    // Check max\n    var max = this.maxes[this.activeIndex];\n    if (max && showing['after' + noun](max)) {\n      showing = max.clone();\n    }\n    this._datesToShow[this.activeIndex] = showing;\n\n    // Populate the rest of the dates\n    this._setDatesToShow();\n\n    return this.render();\n  };\n\n  /**\n   * Render the appropriate number of years.\n   * @return {Array}\n   */\n\n\n  CalendarPopover.prototype._renderYears = function _renderYears() {\n    throw new Error('Displaying years in the calendar is not yet supported!');\n  };\n\n  /**\n   * Render the appropriate number of weeks.\n   * @return {Array}\n   */\n\n\n  CalendarPopover.prototype._renderWeeks = function _renderWeeks() {\n    throw new Error('Displaying weeks in the calendar is not yet supported!');\n  };\n\n  /**\n   * Render the appropriate number of days.\n   * @return {Array}\n   */\n\n\n  CalendarPopover.prototype._renderDays = function _renderDays() {\n    throw new Error('Displaying days in the calendar is not yet supported!');\n  };\n\n  /**\n   * Render the appropriate number of months.\n   * @return {Array}\n   */\n\n\n  CalendarPopover.prototype._renderMonths = function _renderMonths() {\n\n    var months = [];\n    var i = 0;\n    var len = this._datesToShow.length;\n    var current = _date2.default.now();\n\n    for (; i < len; i++) {\n      months.push(this._renderMonth(this._datesToShow[i], current));\n    }\n\n    return months;\n  };\n\n  /**\n   * Render a month.\n   * @param {Object} date\n   * @param {Object} current\n   * @return {Element}\n   */\n\n\n  CalendarPopover.prototype._renderMonth = function _renderMonth(date, current) {\n\n    // A unique key for this month used for caching\n    var key = date.year + '-' + date.month;\n\n    // Ensure we have a cache\n    this._renderCache = this._renderCache || {};\n\n    // Return a cached instance\n    if (this._renderCache[key]) {\n      return this._renderCache[key];\n    }\n\n    // Create the element\n    var el = document.createElement('div');\n    var html = '';\n    el.className = 'spark-calendar__month ' + this._getMonthClassNames(date);\n\n    // Add the title or dropdowns.\n    html += '<div class=\"spark-calendar__month-title\">';\n    if (this.quickJump && this.visibleCounts[this.activeIndex] === 1) {\n      html += this._renderMonthQuickJump(date);\n    } else {\n      html += date.monthName + ' ' + date.year;\n    }\n    html += '</div>';\n\n    // Add the days of the week headings\n    html += this._renderMonthDaysOfWeek();\n\n    // Add the days\n    html += this._renderMonthDays(date, current);\n\n    el.innerHTML = html;\n\n    // Store in the cache and return\n    return this._renderCache[key] = el;\n  };\n\n  /**\n   * Render the select inputs used for jumping ahead/backward several months.\n   * @param {Object} date\n   */\n\n\n  CalendarPopover.prototype._renderMonthQuickJump = function _renderMonthQuickJump(date) {\n\n    var el = document.createElement('div');\n    var years = void 0;\n    var months = void 0;\n\n    // Min and max year to show\n    var min = this.mins[this.activeIndex] ? this.mins[this.activeIndex].clone() : null;\n    var max = this.maxes[this.activeIndex] ? this.maxes[this.activeIndex].clone() : null;\n\n    // No min, go 50 years back\n    if (!min) {\n      min = date.clone();\n      min.year = min.year - 50;\n    }\n\n    // No max, go 50 years forward\n    if (!max) {\n      max = date.clone();\n      max.year = max.year + 50;\n    }\n\n    // Get the months to show.\n    var monthOpts = _date2.default.getMonthNames().map(function (val, i) {\n\n      // Don't show a month that is out of the valid range.\n      if (min.year === max.year && (i + 1 < min.month || i + 1 > max.month)) {\n        return null;\n      }\n\n      return {\n        value: i + 1,\n        text: val\n      };\n    }).filter(function (i) {\n      return i;\n    });\n\n    // Min and max are the same month, so just show text.\n    if (!monthOpts.length || monthOpts.length === 1) {\n      months = document.createElement('span');\n      months.innerHTML = date.monthName + ' ';\n    } else {\n\n      // Build a select list of months\n      months = document.createElement('label');\n      (0, _addClass2.default)(months, 'spark-select spark-calendar__select');\n      months.appendChild((0, _buildSelect2.default)({\n        selected: date.month,\n        attributes: {\n          class: 'spark-select__input',\n          name: 'month'\n        },\n        options: monthOpts\n      }));\n    }\n\n    // Min and max year are the same, so just show text.\n    if (min.year === max.year) {\n      years = document.createElement('span');\n      years.innerHTML = date.year;\n    } else {\n\n      // Build a select list of years\n      years = document.createElement('label');\n      (0, _addClass2.default)(years, 'spark-select spark-calendar__select');\n      years.appendChild((0, _buildSelect2.default)({\n        selected: date.year,\n        attributes: {\n          class: 'spark-select__input',\n          name: 'year'\n        },\n        options: (0, _range2.default)(max.year, min.year - 1)\n      }));\n    }\n\n    (0, _appendChildren2.default)(el, [months, years]);\n\n    return el.innerHTML;\n  };\n\n  /**\n   * Render the days of week row for a month calendar.\n   * @return {String}\n   */\n\n\n  CalendarPopover.prototype._renderMonthDaysOfWeek = function _renderMonthDaysOfWeek() {\n\n    var daysOfWeek = _date2.default.getDayNames();\n    var i = 0;\n    var len = daysOfWeek.length;\n    var str = '<div class=\"spark-calendar__days-of-week\">';\n\n    for (; i < len; i++) {\n      str += '<span class=\"spark-calendar__day-of-week\">' + daysOfWeek[i][0] + '</span>';\n    }\n\n    return str += '</div>';\n  };\n\n  /**\n   * Render the days of week row for a month calendar.\n   * @param {Object} date\n   * @param {Object} current\n   * @return {String}\n   */\n\n\n  CalendarPopover.prototype._renderMonthDays = function _renderMonthDays(date, current) {\n\n    var dayOfWeek = date.monthStart.dayOfWeek;\n    var startOfWeek = dayOfWeek > 1 ? date.monthStart.weekStart : null;\n    var monthEnd = date.monthEnd;\n    var weeks = 6;\n    var i = 0;\n    var j = 0;\n    var str = '<div class=\"spark-calendar__days\">';\n    var day = 0;\n    var month = startOfWeek ? startOfWeek.month : date.month;\n    var year = startOfWeek ? startOfWeek.year : date.year;\n    var isCurrentMonth = current.year === date.year && current.month === date.month;\n\n    // If we have days that come before the first of the month, the days will start as\n    // inactive. We use a 1 here to indicate the date is inactive and _before_\n    // the start of the month.\n    var inactive = startOfWeek ? 1 : null;\n\n    for (; i < weeks; i++) {\n      for (; j < 7; j++) {\n\n        day = startOfWeek ? startOfWeek.day + j : day + 1;\n        str += this._renderMonthDay(day, month, year, isCurrentMonth, current, inactive);\n\n        if (startOfWeek && j + 1 >= dayOfWeek - 1) {\n          startOfWeek = null;\n          inactive = null;\n          day = 0;\n          month = date.month;\n          year = date.year;\n          isCurrentMonth = current.year === date.year && current.month === date.month;\n        } else if (day >= monthEnd.day && i > 0) {\n\n          // Inactive days that come _after_ the last of the month are denoted with a 2.\n          // _renderMonthDay handles 1s and 2s differently, but both add the inactive class.\n          inactive = 2;\n          isCurrentMonth = false;\n\n          day = 0;\n          month++;\n\n          if (month > 12) {\n            year++;\n            month = 1;\n          }\n        }\n      }\n      j = 0;\n    }\n\n    return str += '</div>';\n  };\n\n  /**\n   * Render a day of the month.\n   * @param {Number} day\n   * @param {Number} month\n   * @param {Number} year\n   * @param {Boolean} isCurrentMonth\n   * @param {Object} current\n   * @param {Boolean} inactive\n   */\n\n\n  CalendarPopover.prototype._renderMonthDay = function _renderMonthDay(day, month, year, isCurrentMonth, current, inactive) {\n\n    var date = _date2.default.create({\n      year: year,\n      month: month,\n      day: day\n    });\n    var str = '<a';\n    var disabled = inactive || this._isDayDisabled(date);\n\n    str += !disabled ? ' data-date=\"' + parsedDomFormat.getString(date) + '\"' : '';\n    str += inactive ? ' data-direction=\"' + (inactive === 2 ? 'next' : 'previous') + '\"' : '';\n    str += ' class=\"spark-calendar__day';\n    str += isCurrentMonth && current.day === day && current.month === month && current.year === year ? ' spark-calendar__day--today' : '';\n    str += inactive ? ' spark-calendar__day--inactive' : '';\n    str += disabled ? ' spark-calendar__day--disabled' : '';\n    str += this._isDaySelected(date) ? ' spark-calendar__day--selected' : '';\n    str += this._isDayRangeStart(date) ? ' spark-calendar__range-start' : '';\n    str += this._isDayRangeMiddle(date) ? ' spark-calendar__range-middle' : '';\n    str += this._isDayRangeEnd(date) ? ' spark-calendar__range-end' : '';\n    str += this._isDayRangeLast(date) ? ' spark-calendar__range-last' : '';\n    str += '\"';\n    str += ' href=\"#\"><span>';\n    str += day;\n    str += this._getDayInfo(date);\n    str += '</span></a>';\n\n    return str;\n  };\n\n  /**\n   * Render the children into the content.\n   * @param {Array} content\n   */\n\n\n  CalendarPopover.prototype._insertContent = function _insertContent(content, params) {\n\n    this._currentContent = this._currentContent || [];\n\n    params = params || {};\n\n    var keep = void 0;\n    var i = 0;\n    var len = void 0;\n\n    // If we've been asked to prepend or append, add the new elements in front,\n    // save the number of old elements we're sliding out, animate,\n    // then clean up.\n    if (this.animate) {\n\n      if (params.prepend) {\n\n        // Get the last elements to keep\n        keep = this._currentContent.slice(-params.prepend);\n        len = keep.length;\n        for (; i < len; i++) {\n          content.push(keep[i]);\n        }\n\n        this.calendarEl.setAttribute('data-prepend-count', len);\n\n        this._animateContent(function () {\n\n          this.calendarEl.removeAttribute('data-prepend-count');\n\n          this._animateContent(function () {\n            content = content.slice(0, -params.prepend);\n            this._insertContent(content);\n          }, this.animationDuration);\n        }, 10);\n      }\n      // Same but appending\n      else if (params.append) {\n\n          // Get the first elements to keep\n          keep = this._currentContent.slice(0, params.append);\n          len = keep.length;\n          for (; i < len; i++) {\n            content.unshift(keep[i]);\n          }\n\n          this.calendarEl.setAttribute('data-append-count', len);\n\n          this._animateContent(function () {\n\n            (0, _addClass2.default)(this.calendarEl, 'no-animate');\n            content = content.slice(params.append);\n            this._insertContent(content);\n            this.calendarEl.removeAttribute('data-append-count');\n\n            this._animateContent(function () {\n              (0, _removeClass2.default)(this.calendarEl, 'no-animate');\n            }, 10);\n          }, this.animationDuration);\n        }\n    }\n\n    (0, _appendChildren2.default)(this.calendarContentEl, this._currentContent = content, true);\n  };\n\n  /**\n   * Is a given day selected?\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDaySelected = function _isDaySelected(date) {\n    return this.values && date.equal(this.values);\n  };\n\n  /**\n   * Is a given day the start of a range?\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDayRangeStart = function _isDayRangeStart(date) {\n    return this.inputEls.length > 1 && this.values && date.equal(this.values[0]);\n  };\n\n  /**\n   * Is a given day the middle of a range?\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDayRangeMiddle = function _isDayRangeMiddle(date) {\n    return this.inputEls.length > 1 && this.values && this.values.length > 1 && date.equal(this.values.slice(1, -1));\n  };\n\n  /**\n   * Is a given day the end of a range?\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDayRangeEnd = function _isDayRangeEnd(date) {\n    return this.inputEls.length > 1 && this.values && this.values.length > 1 && date.equal(this.values[this.values.length - 1]);\n  };\n\n  /**\n   * Is a given day currently the last\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDayRangeLast = function _isDayRangeLast(date) {\n\n    var i = this.values.length - 1;\n\n    for (; i > 0; i--) {\n\n      // We have a value and it's not the same as the date.\n      if (this.values[i]) {\n        if (!date.equal(this.values[i])) {\n          return false;\n        }\n        break;\n      }\n    }\n\n    return true;\n  };\n\n  /**\n   * Is a given day disabled?\n   * @param {Object} date\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._isDayDisabled = function _isDayDisabled(date) {\n    return this.daysDisabled && this.daysDisabled[date.year] && this.daysDisabled[date.year][date.month] && this.daysDisabled[date.year][date.month].indexOf(date.day) !== -1 || this.mins[this.activeIndex] && date.before(this.mins[this.activeIndex], true) || this.maxes[this.activeIndex] && date.after(this.maxes[this.activeIndex], true);\n  };\n\n  /**\n   * Get any \"info\" for a given day.\n   * @param {Object} date\n   * @return {String}\n   */\n\n\n  CalendarPopover.prototype._getDayInfo = function _getDayInfo(date) {\n    return this.daysInfo && this.daysInfo[date.year] && this.daysInfo[date.year][date.month] && this.daysInfo[date.year][date.month][date.day] ? '<span class=\"spark-calendar__day-note\">' + this.daysInfo[date.year][date.month][date.day] + '</span>' : '';\n  };\n\n  /**\n   * Get the class names for a month.\n   * @param {Object} date\n   * @return {String}\n   */\n\n\n  CalendarPopover.prototype._getMonthClassNames = function _getMonthClassNames(date) {\n\n    var cls = [];\n\n    // Do we have a value in this month?\n    if (date.equalMonth(this.values)) {\n      cls.push('has-value');\n    }\n\n    // Does this month have the start, middle or end of a range?\n    if (this._isRange && this.els.length > 1) {\n\n      var start = date.equalMonth(this.values[0]);\n      var end = date.equalMonth(this.values[this.values.length - 1]);\n      var middle = date.equalMonth(this.values.slice(1, -1));\n      var valBefore = date.afterMonth(this.values);\n      var valAfter = date.beforeMonth(this.values);\n      var afterEnd = this.values[this.values.length - 1] && date.after(this.values[this.values.length - 1]);\n\n      if (start) {\n        cls.push('range-start');\n      }\n      if (end) {\n        cls.push('range-end');\n      }\n      if (middle) {\n        cls.push('range-middle');\n      }\n      if (valBefore) {\n        cls.push('value-before');\n      }\n      if (valAfter) {\n        cls.push('value-after');\n      }\n      if (afterEnd) {\n        cls.push('after-range-end');\n      }\n    }\n\n    return cls.join(' ');\n  };\n\n  /**\n   * Create the calendar.\n   */\n\n\n  CalendarPopover.prototype._createCalendar = function _createCalendar() {\n    var el = document.createElement('div');\n    (0, _addClass2.default)(el, 'spark-calendar');\n    el.innerHTML = '<nav class=\"spark-calendar__nav\"><button class=\"spark-calendar__previous spark-icon-chevron-left\" title=\"Previous\"></button><button class=\"spark-calendar__next spark-icon-chevron-right\" title=\"Next\"></button></nav><div class=\"spark-calendar__overflow\"><div class=\"spark-calendar__content\"></div></div>';\n    this.calendarEl = el;\n    this.calendarContentEl = el.querySelector('.spark-calendar__content');\n    this.calendarOverflowEl = el.querySelector('.spark-calendar_overflow');\n  };\n\n  /**\n   * Create the popover.\n   */\n\n\n  CalendarPopover.prototype._createPopover = function _createPopover() {\n\n    this.popover = new _popover2.default(document.createElement('div'), {\n      anchorX: 'center',\n      anchorY: 'bottom',\n      contentEl: this.calendarEl,\n      onClose: this._onPopoverClose.bind(this),\n      onOpen: this._onPopoverOpen.bind(this)\n    });\n  };\n\n  /**\n   * Cache elements.\n   */\n\n\n  CalendarPopover.prototype._cacheElements = function _cacheElements() {\n\n    this.inputEls = [];\n\n    var i = 0;\n    var len = this.els.length;\n    var input = void 0;\n\n    for (; i < len; i++) {\n      input = this.els[i].nodeName.toLowerCase() === 'input' ? this.els[i] : this.els[i].querySelector('input[type=\"date\"]');\n      this.inputEls[i] = input;\n    }\n  };\n\n  /**\n   * Cache elements specific to the calendar.\n   */\n\n\n  CalendarPopover.prototype._cacheCalendarElements = function _cacheCalendarElements() {\n    this.nextButtonEl = this.calendarEl.querySelector('.spark-calendar__next');\n    this.previousButtonEl = this.calendarEl.querySelector('.spark-calendar__previous');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  CalendarPopover.prototype._parseParams = function _parseParams() {\n\n    this._parseInputElsParams();\n\n    this._isRange = this.els.length > 1 ? true : false;\n    this.autoAdvance = this.autoAdvance !== null ? this.autoAdvance : (0, _parseAttribute.boolean)(this.els[0], 'data-auto-advance', true);\n    this.autoClose = this.autoClose !== null ? this.autoClose : (0, _parseAttribute.boolean)(this.els[0], 'data-auto-close', true);\n    this.closeDelay = this.closeDelay !== null ? this.closeDelay : (0, _parseAttribute.number)(this.els[0], 'data-close-delay', 500);\n    this.quickJump = this.quickJump !== null ? this.quickJump : (0, _parseAttribute.boolean)(this.els[0], 'data-quick-jump', false);\n    this.viewRange = this.viewRange !== null ? this.viewRange : (0, _parseAttribute.string)(this.els[0], 'data-view-range', 'month');\n    this.animate = this.animate !== null ? this.animate : (0, _parseAttribute.boolean)(this.els[0], 'data-animate', true);\n    this.animationDuration = this.animationDuration !== null ? this.animationDuration : (0, _parseAttribute.number)(this.els[0], 'data-animation-duration', 100);\n    this.showOnFocus = this.showOnFocus !== null ? this.showOnFocus : (0, _parseAttribute.boolean)(this.els[0], 'data-show-on-focus', false);\n  };\n\n  /**\n   * Parse the min, max, value and visible counts from the elements if we can.\n   * @return {Number|Boolean}\n   */\n\n\n  CalendarPopover.prototype._parseInputElsParams = function _parseInputElsParams() {\n\n    var els = this.inputEls;\n\n    if (!els) {\n      return;\n    }\n\n    var i = 0;\n    var len = els.length;\n    var mins = [];\n    var maxes = [];\n    var values = [];\n    var visibleCounts = [];\n    var disableds = [];\n\n    for (; i < len; i++) {\n\n      if (!els[i]) {\n        continue;\n      }\n\n      if (this.mins && this.mins[i]) mins[i] = _typeof(this.mins[i]) === 'object' ? this.mins[i] : parsedDomFormat.getValues(this.mins[i]);else if (els[i].getAttribute('min')) mins[i] = parsedDomFormat.getValues(els[i].getAttribute('min'));\n\n      if (this.maxes && this.maxes[i]) maxes[i] = _typeof(this.maxes[i]) === 'object' ? this.maxes[i] : parsedDomFormat.getValues(this.maxes[i]);else if (els[i].getAttribute('max')) maxes[i] = parsedDomFormat.getValues(els[i].getAttribute('max'));\n\n      if (this.values && this.values[i]) values[i] = _typeof(this.values[i]) === 'object' ? this.values[i] : parsedDomFormat.getValues(this.values[i]);else if (els[i].value) values[i] = parsedDomFormat.getValues(els[i].value);\n\n      disableds[i] = (0, _parseAttribute.boolean)(els[i], 'disabled', false);\n\n      if (!this.visibleCounts) visibleCounts[i] = parseInt(els[i].getAttribute('data-visible-count'), 10) || 1;\n    }\n\n    this.mins = mins;\n    this.minVisible = _date2.default.earliest(mins);\n    this.maxes = maxes;\n    this.maxVisible = _date2.default.latest(maxes);\n    this.values = values;\n    this._isDisabled = disableds;\n    if (visibleCounts.length) this.visibleCounts = visibleCounts;\n  };\n\n  /**\n   * Get the dates we should be showing. Start with the first value or today's date.\n   */\n\n\n  CalendarPopover.prototype._initDatesToShow = function _initDatesToShow() {\n\n    var arr = [];\n    var i = 0;\n    var len = this.values.length;\n\n    // Get the date for the current index\n    if (this.values[this.activeIndex]) {\n      arr.push(this.values[this.activeIndex].clone());\n    }\n\n    // Get the first date\n    for (; i < len && !arr.length; i++) {\n      if (this.values[i]) {\n        arr.push(this.values[i].clone());\n      }\n    }\n\n    // If we didn't get a date, use the min\n    for (i = 0, len = this.mins.length; i < len && !arr.length; i++) {\n      if (this.mins[i]) {\n        arr.push(this.mins[i].clone());\n      }\n    }\n\n    // If we still didn't get a date, add today's date.\n    if (!arr.length) {\n      arr.push(_date2.default.now());\n    }\n\n    this._datesToShow = arr;\n\n    this._setDatesToShow();\n  };\n\n  /**\n   * Set the dates to show.\n   * @param {Number} change Optional The direction to change\n   */\n\n\n  CalendarPopover.prototype._setDatesToShow = function _setDatesToShow(change) {\n\n    var arr = this._datesToShow;\n    var visibleCount = this._currentBreakpoint === 'xs' || this._currentBreakpoint === 'sm' ? 1 : this.visibleCounts[this.activeIndex] || this.visibleCounts[0] || 1;\n    var i = 0;\n    var noun = this.viewRange.charAt(0).toUpperCase() + this.viewRange.slice(1);\n\n    // If we have more dates to show than we're supposed to show, remove the excess.\n    // This happens when visible count changes between renders\n    if (arr.length > visibleCount) {\n      arr.splice(visibleCount);\n    }\n\n    // If we are incrementing or decrementing the starting month\n    if (change) {\n\n      // Empty the rest of the dates from the array\n      arr = this._datesToShow = arr.splice(0, 1);\n\n      // Decrement\n      if (change < 0) {\n        for (; i > change; i--) {\n          arr[0] = arr[0]['previous' + noun];\n        }\n      } else {\n        for (; i < change; i++) {\n          arr[0] = arr[0]['next' + noun];\n        }\n      }\n    }\n\n    // Check bounds\n    this._atMin = this._checkMinDateVisible(noun, arr);\n    this._atMax = this._checkMaxDateVisible(noun, arr);\n\n    var addDate = void 0;\n    var lastSelected = void 0;\n    var action = void 0;\n    i = 0;\n\n    // Add additional dates\n    while (arr.length < visibleCount) {\n\n      // If at the max, prepend\n      // If we're in the last input and it has a value and it's a different month than the first value, prepend\n      // If at the min, append\n      // If an item we're adding is before the min, discard it and append an item after the last in the arr\n      // If an item we're adding is after the max, discard it and prepend an item before the first in the arr\n\n      lastSelected = !change && this.activeIndex === this.values.length - 1 && this.values[this.values.length - 1] && this.values[0] && !this.values[this.values.length - 1]['equal' + noun](this.values, true);\n\n      // If we're showing the max date or we have the last input selected and it has a value, add dates before.\n      if (this._atMax || lastSelected) {\n\n        addDate = arr[i]['previous' + noun];\n        action = 'unshift';\n\n        if (addDate['before' + noun](this.minVisible)) {\n          addDate = arr[i]['next' + noun];\n          action = 'push';\n        }\n      } else {\n\n        addDate = arr[i]['next' + noun];\n        action = 'push';\n\n        if (addDate['after' + noun](this.maxVisible)) {\n          addDate = arr[i]['previous' + noun];\n          action = 'unshift';\n        }\n      }\n\n      if (action === 'push') {\n        arr.push(addDate);\n        i = arr.length - 1;\n      } else {\n        arr.unshift(addDate);\n        i = 0;\n      }\n    }\n\n    // Check bounds again\n    this._atMin = this._checkMinDateVisible(noun, arr);\n    this._atMax = this._checkMaxDateVisible(noun, arr);\n\n    // Update the navigation to reflect the _atMin or _atMax state\n    this._updateNav();\n  };\n\n  /**\n   * Check for the min value in an array of values.\n   * @param {Object} min\n   * @param {String} noun The type of date to check\n   * @param {Array} arr\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._checkMinDateVisible = function _checkMinDateVisible(noun, arr) {\n\n    if (!this.minVisible) {\n      return;\n    }\n\n    var min = this.minVisible;\n\n    if (min && (arr[0]['equal' + noun](min) || arr[0]['before' + noun](min))) {\n      arr[0] = min;\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Check for the max value in an array of values.\n   * @param {Object} max\n   * @param {String} noun The type of date to check\n   * @param {Array} arr\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._checkMaxDateVisible = function _checkMaxDateVisible(noun, arr) {\n\n    if (!this.maxVisible) {\n      return;\n    }\n\n    var max = this.maxVisible;\n\n    if (max && arr[arr.length - 1] && (arr[arr.length - 1]['equal' + noun](max) || arr[arr.length - 1]['after' + noun](max))) {\n      arr[arr.length - 1] = max;\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Check that the values are in bounds and, optinoally, in sequential order.\n   * If checking for sequence, remove those which aren't.\n   * @param {Number} setIndex The index of the value most recently set. This shouldn't be removed.\n   * @return {Boolean} Did any values change?\n   */\n\n\n  CalendarPopover.prototype._checkValues = function _checkValues(setIndex, skipRangeCheck) {\n\n    // Check boundaries\n    var changed = this._checkMinMaxValues();\n\n    // Sequential range items check\n    if (this._isRange && !skipRangeCheck) {\n\n      var i = this.values.length - 1;\n\n      for (; i >= 0; i--) {\n        if (this.values[i] && this.values[i - 1] && this.values[i].beforeDay(this.values[i - 1], true)) {\n          if (i === setIndex) {\n            this.setValue(null, i - 1, true);\n          } else {\n            this.setValue(null, i, true);\n          }\n          changed = true;\n        }\n      }\n    }\n\n    return changed;\n  };\n\n  /**\n   * Check minimum/maximum values.\n   * @return {Boolean}\n   */\n\n\n  CalendarPopover.prototype._checkMinMaxValues = function _checkMinMaxValues() {\n\n    var i = 0;\n    var len = this.values.length;\n    var changed = false;\n\n    for (; i < len; i++) {\n      if (this.maxes && this.maxes[i] && this.values[i] && this.values[i].after(this.maxes[i], true)) {\n        this.values[i] = this.maxes[i].clone();\n        changed = true;\n      } else if (this.mins && this.mins[i] && this.values[i] && this.values[i].before(this.mins[i], true)) {\n        this.values[i] = this.mins[i].clone();\n        changed = true;\n      }\n    }\n\n    return changed;\n  };\n\n  /**\n   * Enqueue animations to be run. (Not really animations since those happen w/ CSS. More\n   * of a manager of timeouts).\n   * @param {Function} cb\n   * @param {Number} duration\n   */\n\n\n  CalendarPopover.prototype._animateContent = function _animateContent(cb, duration) {\n    this._animationQueue = this._animationQueue || [];\n    this._animationQueue.push({\n      cb: cb,\n      d: duration\n    });\n    this._runAnimation();\n  };\n\n  /**\n   * Run the first queued animation. When complete, run the next animation.\n   */\n\n\n  CalendarPopover.prototype._runAnimation = function _runAnimation() {\n\n    if (!this._animationTimer) {\n\n      var a = this._animationQueue.shift();\n\n      if (a) {\n\n        this._animationTimer = setTimeout(function () {\n          a.cb.call(this);\n          this._animationTimer = null;\n          this._runAnimation();\n        }.bind(this), a.d);\n      }\n    }\n  };\n\n  /**\n   * Update attributes on the element and its children.\n   */\n\n\n  CalendarPopover.prototype._updateAttributes = function _updateAttributes() {\n    this.calendarEl.setAttribute('data-visible-count', this._currentBreakpoint === 'xs' ? 1 : this.visibleCounts[this.activeIndex] || this.visibleCounts[0] || 1);\n    this._updateNav();\n  };\n\n  /**\n   * Update the navigation to reflect the ability to move forward and backward.\n   */\n\n\n  CalendarPopover.prototype._updateNav = function _updateNav() {\n\n    if (this.previousButtonEl) {\n      if (this._atMin) this.previousButtonEl.setAttribute('disabled', true);else this.previousButtonEl.removeAttribute('disabled');\n    }\n\n    if (this.nextButtonEl) {\n      if (this._atMax) this.nextButtonEl.setAttribute('disabled', true);else this.nextButtonEl.removeAttribute('disabled');\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  CalendarPopover.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n\n    this._onInputChangeBound = this._onInputChange.bind(this);\n    this._onSelectChangeBound = this._onSelectChange.bind(this);\n    this._onInputFocusBound = this._onInputFocus.bind(this);\n    this._onClickBound = this._onClick.bind(this);\n    this._onCalendarClickBound = this._onCalendarClick.bind(this);\n\n    this._onCalendarMouseOverBound = this._onCalendarMouseOver.bind(this);\n    this._onCalendarMouseOutBound = this._onCalendarMouseOut.bind(this);\n\n    this._onResizeBound = this._onResize.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  CalendarPopover.prototype._addEventListeners = function _addEventListeners() {\n\n    var i = 0;\n    var len = this.els.length;\n\n    for (; i < len; i++) {\n      this.els[i].addEventListener('click', this._onClickBound);\n      this.inputEls[i].addEventListener('change', this._onInputChangeBound);\n      this.inputEls[i].addEventListener('focus', this._onInputFocusBound);\n    }\n\n    this.calendarEl.addEventListener('mouseover', this._onCalendarMouseOverBound);\n    this.calendarEl.addEventListener('mouseout', this._onCalendarMouseOutBound);\n    this.calendarEl.addEventListener('click', this._onCalendarClickBound);\n\n    this.calendarEl.addEventListener('change', this._onSelectChangeBound);\n\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('orientationchange', this._onResizeBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  CalendarPopover.prototype._removeEventListeners = function _removeEventListeners() {\n\n    var i = 0;\n    var len = this.els.length;\n\n    for (; i < len; i++) {\n      this.els[i].removeEventListener('click', this._onClickBound);\n      this.inputEls[i].removeEventListener('change', this._onInputChangeBound);\n      this.inputEls[i].removeEventListener('focus', this._onInputFocusBound);\n    }\n\n    this.calendarEl.removeEventListener('mouseover', this._onCalendarMouseOverBound);\n    this.calendarEl.removeEventListener('mouseout', this._onCalendarMouseOutBound);\n    this.calendarEl.removeEventListener('click', this._onCalendarClickBound);\n\n    this.calendarEl.removeEventListener('change', this._onSelectChangeBound);\n\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('orientationchange', this._onResizeBound);\n  };\n\n  /**\n   * Focus on the next input if there is one.\n   */\n\n\n  CalendarPopover.prototype._focusNext = function _focusNext() {\n\n    var index = void 0;\n\n    // If we don't have any null values, don't do anything.\n    if ((index = this.values.indexOf(null)) === -1) {\n      return;\n    }\n\n    if (this.activeIndex < this.els.length - 1) {\n      this.open(this.activeIndex + 1);\n    } else {\n      this.open(index);\n    }\n  };\n\n  /**\n   * Close if we're on the last input and we have values.\n   */\n\n\n  CalendarPopover.prototype._closeOnLast = function _closeOnLast() {\n    if (this.values.indexOf(null) === -1) {\n      this.close({\n        delay: this.closeDelay\n      });\n    }\n  };\n\n  /**\n   * Make the toggle icon a fill icon.\n   */\n\n\n  CalendarPopover.prototype._fillToggle = function _fillToggle() {\n\n    var toggle = void 0;\n\n    if (this.els[this.activeIndex] && (toggle = this.els[this.activeIndex].querySelector('.spark-date__calendar-toggle [class*=\"spark-icon\"]'))) {\n      (0, _addClass2.default)(toggle, 'spark-icon--fill');\n    }\n  };\n\n  /**\n   * Make the toggle icon a line icon.\n   */\n\n\n  CalendarPopover.prototype._unfillToggle = function _unfillToggle() {\n\n    var toggle = void 0;\n\n    if (this.els[this.activeIndex] && (toggle = this.els[this.activeIndex].querySelector('.spark-date__calendar-toggle [class*=\"spark-icon\"]'))) {\n      (0, _removeClass2.default)(toggle, 'spark-icon--fill');\n    }\n  };\n\n  /**\n   * Activate the element associated with the calendar.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype._activateElement = function _activateElement(index) {\n    var el = this.els[index];\n    if (el) (0, _addClass2.default)(el, 'active');\n  };\n\n  /**\n   * Deactivate the element associated with the calendar.\n   * @param {Number} index\n   */\n\n\n  CalendarPopover.prototype._deactivateElement = function _deactivateElement(index) {\n    var el = this.els[index];\n    if (el && !this.values[index] && !(0, _hasClass2.default)(el, 'focus') && !(0, _hasClass2.default)(el, 'has-partial-value')) {\n      (0, _removeClass2.default)(el, 'active');\n    }\n  };\n\n  /**\n   * Check the size of the popover and see if we should be showing the XS treatment.\n   */\n\n\n  CalendarPopover.prototype._checkSize = function _checkSize() {\n\n    var bp = (0, _breakpoint.get)(window.outerWidth);\n\n    // Don't do anything if the breakpoint hasn't changed.\n    if (this._currentBreakpoint === bp) return;\n\n    // Store the breakpoint\n    this._currentBreakpoint = bp;\n\n    // Re-render the date range\n    this._setDatesToShow();\n    this.render(true);\n    this.popover.update();\n  };\n\n  /**\n   * Scroll the active input element into view.\n   */\n\n\n  CalendarPopover.prototype._scrollToInput = function _scrollToInput() {\n    var el = this.els[this.activeIndex];\n    if (el) (0, _scrollTo2.default)(el);\n  };\n\n  /**\n   * Update the hover classes.\n   * @param {Element} hoverStarts\n   * @param {Element} hoverEnds\n   */\n\n\n  CalendarPopover.prototype._updateHoverClasses = function _updateHoverClasses(hoverStarts, hoverEnds) {\n\n    this._hoverStarts = this._hoverStarts || [];\n    this._hoverEnds = this._hoverEnds || [];\n\n    hoverStarts = hoverStarts instanceof Array ? hoverStarts : hoverStarts ? [hoverStarts] : [];\n    hoverEnds = hoverEnds instanceof Array ? hoverEnds : hoverEnds ? [hoverEnds] : [];\n\n    var allStarts = [];\n    var curStarts = [];\n    var newStarts = [];\n    var allEnds = [];\n    var curEnds = [];\n    var newEnds = [];\n\n    hoverStarts.forEach(function (el) {\n\n      var index = this._hoverStarts.indexOf(el);\n\n      // Already hovered.\n      if (index !== -1) {\n        curStarts.push(el);\n      }\n      // Not already hovered. Ready to add the class.\n      else if (el) {\n          newStarts.push(el);\n          (0, _addClass2.default)(el, 'hover-start');\n        }\n    }, this);\n\n    allStarts = Array.prototype.concat.call([], curStarts, newStarts);\n\n    this._hoverStarts.forEach(function (el) {\n      if (allStarts.indexOf(el) === -1) {\n        (0, _removeClass2.default)(el, 'hover-start');\n      }\n    }, this);\n\n    hoverEnds.forEach(function (el) {\n\n      var index = this._hoverEnds.indexOf(el);\n\n      // Already hovered.\n      if (index !== -1) {\n        curEnds.push(el);\n      }\n      // Not already hovered. Ready to add the class.\n      else if (el) {\n          newEnds.push(el);\n          (0, _addClass2.default)(el, 'hover-end');\n        }\n    }, this);\n\n    allEnds = Array.prototype.concat.call([], curEnds, newEnds);\n\n    this._hoverEnds.forEach(function (el) {\n      if (allEnds.indexOf(el) === -1) {\n        (0, _removeClass2.default)(el, 'hover-end');\n      }\n    }, this);\n\n    this._hoverStarts = allStarts;\n    this._hoverEnds = allEnds;\n  };\n\n  /**\n   * When an element is clicked, if the toggle was the target, open the popover.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onClick = function _onClick(e) {\n\n    if ((0, _getParent2.default)(e.target, '.spark-date__calendar-toggle', this.els)) {\n\n      var el = (0, _getParent2.default)(e.target, '.spark-date', this.els);\n      var index = this.els.indexOf(el);\n\n      e.preventDefault();\n\n      // Open on the next tick. Otherwise we also receive the window click close event.\n      this.open(index, {\n        delay: 1\n      });\n    }\n  };\n\n  /**\n   * When the calendar is hovered, do some highlighting if we're showing a range.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onCalendarMouseOver = function _onCalendarMouseOver(e) {\n    if (this.viewRange === 'month') this._onCalendarMouseOverMonths(e.target);\n  };\n\n  /**\n   * Set hover states for days.\n   * @param  {Element} target\n   */\n\n\n  CalendarPopover.prototype._onCalendarMouseOverMonths = function _onCalendarMouseOverMonths(target) {\n\n    if (!this._isRange) {\n      return;\n    }\n\n    var day = (0, _getParent2.default)(target, '.spark-calendar__day');\n\n    if (!day) {\n      this._updateHoverClasses();\n      return;\n    }\n\n    var month = (0, _getParent2.default)(target, '.spark-calendar__month');\n    var mHasClass = function (c) {\n      return (0, _hasClass2.default)(month, c);\n    }.bind(this);\n    var newStart = [];\n    var newEnd = [];\n    var daySel = void 0;\n\n    // Only do highlights if we don't already have a value for this index.\n    if (!this.values[this.activeIndex]) {\n\n      // A month with a value before it but no value of its own, hover starts\n      // from the first day to the hovered day.\n      if (mHasClass('value-before') && !mHasClass('after-range-end') && !mHasClass('has-value') && !mHasClass('value-after')) {\n\n        newStart.push(month.querySelector('.spark-calendar__day:not(.spark-calendar__day--inactive):not(.spark-calendar__day--disabled)'));\n        newEnd.push(day);\n\n        // Add a hover range to a previous month.\n        var prevMonth = month;\n        while ((prevMonth = (0, _getSiblingBefore2.default)(prevMonth, '.spark-calendar__month')) && !(0, _hasClass2.default)(prevMonth, 'value-after') && ((0, _hasClass2.default)(prevMonth, 'has-value') || (0, _hasClass2.default)(prevMonth, 'value-before'))) {\n\n          daySel = prevMonth.querySelectorAll('.spark-calendar__day--selected');\n          daySel = daySel[daySel.length - 1];\n          daySel = daySel || prevMonth.querySelector('.spark-calendar__day');\n\n          if (daySel) {\n            newStart.push(daySel);\n            daySel = prevMonth.querySelectorAll('.spark-calendar__day');\n            daySel = daySel[daySel.length - 1];\n            newEnd.push(daySel);\n          }\n        }\n      }\n      // A month with a value, highlight either from the hovered day to\n      // the selection or from the selection to the day.\n      else if (mHasClass('has-value') && !mHasClass('value-before') && !mHasClass('value-after') && ((newStart = (0, _getSiblingBefore2.default)(day, '.spark-calendar__day--selected')) || (newEnd = (0, _getSiblingAfter2.default)(day, '.spark-calendar__day--selected')))) {\n\n          if (newStart) {\n            newStart = [newStart];\n            newEnd = [day];\n          } else {\n            newEnd = [newEnd];\n            newStart = [day];\n          }\n\n          if ((0, _hasClass2.default)(newEnd[0], 'spark-calendar__range-start') || (0, _hasClass2.default)(newStart[0], 'spark-calendar__range-end')) {\n            newStart = [];\n            newEnd = [];\n          }\n        }\n        // A month with a middle range should highlight before\n        else if (mHasClass('has-value') && mHasClass('range-middle') && mHasClass('value-before')) {\n            daySel = (0, _getSiblingBefore2.default)(day, '.spark-calendar__day--selected');\n            if (daySel) {\n              newStart = [daySel];\n              newEnd = [day];\n            }\n          }\n    }\n\n    this._updateHoverClasses(newStart, newEnd);\n  };\n\n  /**\n   * When the calendar is hovered, undo some highlighting if we're showing a range.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onCalendarMouseOut = function _onCalendarMouseOut(e) {\n    if (this.viewRange === 'month') this._onCalendarMouseOutMonths(e.target);\n  };\n\n  /**\n   * Clear hover states for days.\n   * @param  {Element} target\n   */\n\n\n  CalendarPopover.prototype._onCalendarMouseOutMonths = function _onCalendarMouseOutMonths(target) {\n\n    var day = (0, _getParent2.default)(target, '.spark-calendar__day');\n    var days = (0, _getParent2.default)(target, '.spark-calendar__days');\n    var month = (0, _getParent2.default)(target, '.spark-calendar__month');\n\n    (0, _removeClass2.default)(day, 'hover');\n    (0, _removeClass2.default)(days, 'hover');\n    (0, _removeClass2.default)(month, 'hover');\n    (0, _removeClass2.default)(this.calendarEl, 'hover');\n  };\n\n  /**\n   * When the calendar is clicked, handle navigation clicks and date selections.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onCalendarClick = function _onCalendarClick(e) {\n\n    var nav = (0, _getParent2.default)(e.target, '.spark-calendar__nav', this.calendarEl);\n    var day = void 0;\n    var dir = void 0;\n\n    // Navigation clicks\n    if (nav) {\n\n      // Previous\n      if ((0, _getParent2.default)(e.target, '.spark-calendar__previous', nav)) {\n        this.previous();\n      }\n      // Next\n      else if ((0, _getParent2.default)(e.target, '.spark-calendar__next', nav)) {\n          this.next();\n        }\n    }\n    // Day click\n    else if (day = (0, _getParent2.default)(e.target, '.spark-calendar__day')) {\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Disabled day moves can move us to the next month\n        if ((0, _hasClass2.default)(day, 'spark-calendar__day--disabled')) {\n          dir = day.getAttribute('data-direction');\n          if (dir === 'next') this.next();else if (dir === 'previous') this.previous();\n        }\n        // Enabled day sets the value\n        else {\n            this.setValue(day.getAttribute('data-date'), this.activeIndex);\n            if (this.autoAdvance) this._focusNext();\n            if (this.autoClose) this._closeOnLast();\n          }\n      }\n  };\n\n  /**\n   * When the popover opens, set the toggle state.\n   */\n\n\n  CalendarPopover.prototype._onPopoverOpen = function _onPopoverOpen() {\n    this._fillToggle();\n    this._checkSize();\n    if (this._currentBreakpoint === 'xs') this._scrollToInput();\n  };\n\n  /**\n   * When the popover closes, reset the active state.\n   */\n\n\n  CalendarPopover.prototype._onPopoverClose = function _onPopoverClose() {\n    this._unfillToggle();\n    this._updateHoverClasses();\n    this._deactivateElement(this.activeIndex);\n    this.activeIndex = null;\n  };\n\n  /**\n   * When the input that corresponds to this instance changes. Allows us to listen\n   * and respond to changes made by other components (Calendar Popover, for example).\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onInputChange = function _onInputChange(e) {\n\n    var index = this.inputEls.indexOf(e.target);\n\n    if (this._inputsChanging && this._inputsChanging.indexOf(index) !== -1) return;\n\n    this.setValue(e.target.value, index);\n  };\n\n  /**\n   * When an input receives focus, if we are supposed to automatically show\n   * on focus do so.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onInputFocus = function _onInputFocus(e) {\n    if (!this.showOnFocus) return;\n    var index = this.inputEls.indexOf(e.target);\n    if (index !== -1) this.open(index);\n  };\n\n  /**\n   * When one of the calendar quick jump select inputs changes.\n   * We have to set the value of the select input back to its original\n   * value or else it will be out of sync when the currently active\n   * month is shown again.\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onSelectChange = function _onSelectChange(e) {\n\n    var name = e.target.name;\n    var val = e.target.value;\n    var curVal = this._datesToShow[this.activeIndex][name];\n    var obj = {};\n\n    obj[name] = val;\n    this.showDate(obj);\n    e.target.value = curVal;\n  };\n\n  /**\n   * When the window resizes, determine if we're at the XS breakpoint so we\n   * can do some mobile-esque stuff!\n   * @param {Object} e\n   */\n\n\n  CalendarPopover.prototype._onResize = function _onResize() {\n    if (this.activeIndex !== null) this._checkSize();\n  };\n\n  return CalendarPopover;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nCalendarPopover.prototype._whitelistedParams = ['els', 'visibleCounts', 'autoAdvance', 'autoClose', 'closeDelay', 'mins', 'maxes', 'values', 'daysDisabled', 'daysInfo', 'quickJump', 'calendarEl', 'viewRange', 'animate', 'animationDuration', 'showOnFocus', 'onChange'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nCalendarPopover.prototype.defaults = {\n  els: null,\n  inputEls: null,\n  calendarEl: null,\n  calendarContentEl: null,\n  calendarOverflowEl: null,\n  visibleCounts: null,\n  activeIndex: null,\n  mins: null,\n  minVisible: null,\n  maxes: null,\n  maxVisible: null,\n  values: null,\n  daysDisabled: null,\n  daysInfo: null,\n  viewRange: null,\n  autoAdvance: null,\n  autoClose: null,\n  quickJump: null,\n  closeDelay: null,\n  nextButtonEl: null,\n  previousButtonEl: null,\n  animate: null,\n  animationDuration: null,\n  showOnFocus: null,\n  onChange: null,\n  _isDisabled: false,\n  _isRange: null,\n  _hoverStarts: null,\n  _hoverEnds: null,\n  _currentBreakpoint: null,\n  _animationQueue: null,\n  _currentContent: null,\n  _datesToShow: null,\n  _monthsShowing: null,\n  _atMin: false,\n  _atMax: false,\n  _inputsChanging: false,\n  _openCloseTimer: null,\n  _renderCache: null,\n  _onClickBound: null,\n  _onCalendarMouseOverBound: null,\n  _onCalendarMouseOutBound: null,\n  _onCalendarClickBound: null,\n  _onSelectChangeBound: null,\n  _onInputChangeBound: null,\n  _onInputFocusBound: null,\n  _onResizeBound: null\n};\n\nexports.default = CalendarPopover;\nmodule.exports = exports['default'];\n//# sourceMappingURL=calendar-popover.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _appendChildren = require('../helpers/manipulation/append-children');\n\nvar _appendChildren2 = _interopRequireDefault(_appendChildren);\n\nvar _hasParent = require('../helpers/traversal/has-parent');\n\nvar _hasParent2 = _interopRequireDefault(_hasParent);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nvar _affix = require('../helpers/position/affix');\n\nvar _affix2 = _interopRequireDefault(_affix);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nopover\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Show and hide a popover. Should do some sanity checks on positioning as well.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Popover(el, {\nptional. Default anchoring of the content's x and y-axis relative to the button.\ndefaultAnchorX: 'center', // 'left', 'center', 'right'\ndefaultAnchorY: 'center' // 'left', 'center', 'right'\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/popover.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Popover = function (_BaseComponent) {\n  _inherits(Popover, _BaseComponent);\n\n  function Popover(el) {\n    var _ret;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Popover);\n\n    var _this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params));\n\n    if (!el) return _ret = _this, _possibleConstructorReturn(_this, _ret);\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _this;\n  }\n\n  /**\n   * Open.\n   * @param {Object} params Optional\n   */\n\n\n  Popover.prototype.open = function open() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n    // If there is a timer running for the close event, clear it so it\n    // doesn't close stuff during open.\n    if (this.closeTimer) {\n      clearTimeout(this.closeTimer);\n      this.closeTimer = null;\n    }\n\n    // If the element we anchor the popover to is fixed, we need to know\n    // so that the affixed content can also be fixed.\n    this._checkFixedPosition();\n\n    // Update an existing affixed instance.\n    if (this.affix) {\n      this.affix.targetEl = params.affixTo || this.affix.targetEl;\n      this.affix.update();\n    }\n    // Affix the content to the toggle\n    else {\n        this.affix = new _affix2.default({\n          el: this.contentEl,\n          targetEl: params.affixTo || this.el,\n          caretEl: this.caretEl,\n          anchorX: this.anchorX,\n          anchorY: this.anchorY,\n          isFixed: this.isFixed\n        });\n      }\n\n    // Listen for clicks on the window\n    this._addWindowEventListeners();\n\n    this.isActive = true;\n\n    // Dispatch a custom event so content inside the popover can respond\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.contentEl.dispatchEvent(e);\n\n    // Update bindings\n    this._updateAttributes();\n\n    // Callbacks\n    (params.complete || noop)();\n    (this.onOpen || noop)();\n\n    return this;\n  };\n\n  /**\n   * Close.\n   * @param {Object} params Optional\n   */\n\n\n  Popover.prototype.close = function close() {\n    var _this2 = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n    // Not open, so don't close.\n    if (!this.affix) return this;\n\n    // If there is a timer running for the close event, clear it so we don't run close stuff twice.\n    if (this.closeTimer) {\n      clearTimeout(this.closeTimer);\n      this.closeTimer = null;\n    }\n\n    // Stop listening to window clicks.\n    this._removeWindowEventListeners();\n\n    this.isActive = false;\n\n    // Update bindings\n    this._updateAttributes();\n\n    // Close after the animation has completed\n    this.closeTimer = setTimeout(function () {\n      _this2._finishClose(params);\n    }, 250);\n\n    return this;\n  };\n\n  /**\n   * Toggle the open state.\n   */\n\n\n  Popover.prototype.toggle = function toggle() {\n    return this[this.isActive ? 'close' : 'open']();\n  };\n\n  /**\n   * Set the content. Optionally append instead of replacing.\n   * @param {Element|Array|NodeList} content\n   * @param {Object} params Optional\n   */\n\n\n  Popover.prototype.setContent = function setContent(content, params) {\n    params = params || {};\n    (0, _appendChildren2.default)(this.contentEl, content.length ? content : [content], !(params.append || false));\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  Popover.prototype.update = function update(el) {\n\n    this._removeEventListeners();\n    this._cacheElements(el || this.el);\n    this._addEventListeners();\n\n    if (this.affix) this.affix.update();\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Popover.prototype._cacheElements = function _cacheElements(el) {\n\n    // If a content element was already passed, make sure it has a popover content class\n    if (this.contentEl) {\n      (0, _addClass2.default)(this.contentEl, 'spark-popover__content');\n    }\n\n    this.el = el;\n    this.toggleEl = this.el.querySelector('.spark-popover__toggle, [data-role=\"toggle\"]') || this.el;\n    this.contentEl = this.contentEl || this.el.querySelector('.spark-popover__content, [class*=\"spark-popover__content--\"]') || this._createContentEl();\n    this.caretEl = this.contentEl.querySelector('.spark-popover__caret') || this._createCaretEl();\n    this.isActive = (0, _hasClass2.default)(this.toggleEl, 'popover-active');\n  };\n\n  /**\n   * Parse config values from the element.\n   */\n\n\n  Popover.prototype._parseParams = function _parseParams() {\n\n    this.anchorY = this.anchorY !== null ? this.anchorY : (0, _parseAttribute.string)(this.contentEl, 'data-anchor-y', null);\n    this.anchorX = this.anchorX !== null ? this.anchorX : (0, _parseAttribute.string)(this.contentEl, 'data-anchor-x', null);\n\n    // No anchors defined\n    if (!this.anchorY && !this.anchorX) {\n\n      // Left\n      if ((0, _hasClass2.default)(this.contentEl, 'spark-popover__content--left')) {\n        this.anchorY = 'middle';\n        this.anchorX = 'left';\n      }\n      // Right\n      else if ((0, _hasClass2.default)(this.contentEl, 'spark-popover__content--right')) {\n          this.anchorY = 'middle';\n          this.anchorX = 'right';\n        }\n        // Top\n        else if ((0, _hasClass2.default)(this.contentEl, 'spark-popover__content--top')) {\n            this.anchorY = 'top';\n            this.anchorX = 'center';\n          }\n          // Bottom\n          else {\n              this.anchorY = 'bottom';\n              this.anchorX = 'center';\n            }\n    }\n  };\n\n  /**\n   * Check to see if the button triggering the popover is fixed.\n   * If so, then popover needs to be fixed as well.\n   */\n\n\n  Popover.prototype._checkFixedPosition = function _checkFixedPosition() {\n\n    var parent = this.el;\n\n    while (parent && parent !== document) {\n      var style = getComputedStyle(parent);\n      if (style.position === 'fixed') {\n        return this.isFixed = true;\n      }\n      parent = parent.parentNode;\n    }\n\n    return this.isFixed = false;\n  };\n\n  /**\n   * Update classes for the open or close state.\n   */\n\n\n  Popover.prototype._updateAttributes = function _updateAttributes() {\n    (0, _toggleClass2.default)(this.el, 'popover-active', this.isActive);\n    (0, _toggleClass2.default)(this.contentEl, 'active', this.isActive);\n    (0, _toggleClass2.default)(this.toggleEl, 'active', this.isActive);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Popover.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onContentClickBound = this._onContentClick.bind(this);\n    this._onWindowClickBound = this._onWindowClick.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Popover.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.contentEl.addEventListener('click', this._onContentClickBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Popover.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.contentEl.removeEventListener('click', this._onContentClickBound);\n  };\n\n  /**\n   * Add event listeners to the window.\n   */\n\n\n  Popover.prototype._addWindowEventListeners = function _addWindowEventListeners() {\n    this._removeWindowEventListeners();\n    window.addEventListener('click', this._onWindowClickBound);\n  };\n\n  /**\n   * Remove window event listeners.\n   */\n\n\n  Popover.prototype._removeWindowEventListeners = function _removeWindowEventListeners() {\n    window.removeEventListener('click', this._onWindowClickBound);\n  };\n\n  /**\n   * Create a content element.\n   * @return {Element}\n   */\n\n\n  Popover.prototype._createContentEl = function _createContentEl() {\n    var el = document.createElement('div');\n    (0, _addClass2.default)(el, 'spark-popover__content');\n    el.setAttribute('role', 'tooltip');\n    return el;\n  };\n\n  /**\n   * Create the caret element.\n   * @return {Element}\n   */\n\n\n  Popover.prototype._createCaretEl = function _createCaretEl() {\n    var el = document.createElement('div');\n    el.className = 'spark-popover__caret';\n    this.contentEl.appendChild(el);\n    return el;\n  };\n\n  /**\n   * Complete the close event by moving the element back and destroying the affix.\n   * @param  {Object} params\n   */\n\n\n  Popover.prototype._finishClose = function _finishClose() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n    this.closeTimer = null;\n\n    // Move the content back to the parent\n    this.el.appendChild(this.contentEl);\n\n    this.affix.remove({ keepEl: true });\n    this.affix = null;\n\n    (params.complete || noop)();\n    (this.onClose || noop)();\n  };\n\n  /**\n   * When we are clicked, toggle the popover-active state.\n   * @param {Object} e\n   */\n\n\n  Popover.prototype._onClick = function _onClick(e) {\n\n    // If this is the toggle element, toggle.\n    if (e.target === this.toggleEl || (0, _hasParent2.default)(e.target, this.toggleEl)) {\n      e.preventDefault();\n      this.toggle();\n      return;\n    }\n  };\n\n  /**\n   * When the toggle is clicked, close if it's a link. If it's content, don't do anything but stop\n   * the event from bubbling.\n   * @param {Object} e\n   */\n\n\n  Popover.prototype._onContentClick = function _onContentClick(e) {\n\n    // If this is a link, close.\n    if ((0, _getParent2.default)(e.target, '.spark-popover__list-link', this.contentEl) || (0, _getParent2.default)(e.target, '.spark-popover__close', this.contentEl)) {\n      this.close();\n      return;\n    }\n  };\n\n  /**\n   * When the window is clicked and it's not part of the popover, close the popover.\n   * @param {Objec} e\n   */\n\n\n  Popover.prototype._onWindowClick = function _onWindowClick(e) {\n\n    if (e.target !== this.el && !(0, _hasParent2.default)(e.target, this.el) && !(0, _hasParent2.default)(e.target, this.contentEl)) {\n      this.close();\n    }\n  };\n\n  return Popover;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nPopover.prototype._whitelistedParams = ['anchorX', 'anchorY', 'toggleEl', 'contentEl', 'onOpen', 'onClose'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nPopover.prototype.defaults = {\n  el: null,\n  toggleEl: null,\n  contentEl: null,\n  caretEl: null,\n  affix: null,\n  isActive: false,\n  isPaused: false,\n  isFixed: false,\n  anchorX: null,\n  anchorY: null,\n  closeTimer: null,\n  onOpen: null,\n  onClose: null,\n  _onClickBound: null,\n  _onContentClickBound: null,\n  _onWindowClickBound: null,\n  _onWindowResizeBound: null,\n  _onWindowScrollBound: null\n};\n\nexports.default = Popover;\nmodule.exports = exports['default'];\n//# sourceMappingURL=popover.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Request Animation\n * Request animation frame polyfill.\n * @module helpers/animation/request.js\n */\nvar request = window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function () {\n\n  var fps = 60;\n  var del = 1000 / fps;\n  var start = Date.now();\n  var prev = start;\n\n  return function requestAnimationFrame(callback) {\n\n    var requestTime = Date.now();\n    var timeout = Math.max(0, del - (requestTime - prev));\n    var timeToCall = requestTime + timeout;\n\n    prev = timeToCall;\n\n    return window.setTimeout(function onAnimationFrame() {\n      callback(timeToCall - start);\n    }, timeout);\n  };\n}();\n\nexports.default = request;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=request.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _offset = require('../dom/offset');\n\nvar _offset2 = _interopRequireDefault(_offset);\n\nvar _tween = require('./tween');\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Scroll To\n * Scroll the window to a specific element or position.\n * @param {Object} params\n *\n * @module helpers/animation/scroll-to.js\n */\n\nfunction scrollTo(params) {\n\n  params = params || {};\n\n  var offset = void 0;\n  var x = void 0;\n  var y = void 0;\n  var target = params.target || window;\n  var startX = target !== window ? target.scrollLeft : target.pageXOffset;\n  var startY = target !== window ? target.scrollTop : target.pageYOffset;\n\n  if (params instanceof HTMLElement) {\n    offset = (0, _offset2.default)(params);\n    x = offset.left;\n    y = offset.top;\n    params = arguments[1] || {};\n  } else {\n    x = params.x || 0;\n    y = params.y || 0;\n  }\n\n  (0, _tween2.default)({\n    target: target,\n    prop: 'scrollTo',\n    start: [startX, startY],\n    end: [x, y],\n    duration: params.duration,\n    callback: params.callback\n  });\n}\n\nexports.default = scrollTo;\nmodule.exports = exports['default'];\n//# sourceMappingURL=scroll-to.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _request = require('./request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {};\n\n/**\n * Tween from one value to another.\n * @param {Object} params\n * @return {Long}\n */\n/**\n * # Tween\n * Tween between two values.\n * @module helpers/animation/tween.js\n */\n\nfunction tween(params) {\n\n  params = params || {};\n\n  var begin;\n  var obj = params.target;\n\n  if (!obj) {\n    throw new Error('Cannot tween without a target!');\n  }\n\n  var prop = typeof params.prop === 'string' ? [params.prop] : params.prop;\n  var start = typeof params.start === 'number' ? [params.start] : params.start;\n  var end = typeof params.end === 'number' ? [params.end] : params.end;\n  var duration = params.duration || 250;\n  var callback = params.callback || noop;\n\n  // Ensure we have the same number of start and end properties.\n  if (start.length !== end.length) {\n    throw new Error('Cannot tween two different sets of parameters!');\n  }\n\n  var f = function f(ts) {\n\n    // Keep track of when we start\n    if (!begin) begin = ts;\n\n    // Progress\n    var prog = ts - begin;\n\n    // Percentage complete\n    var per = Math.min(prog / duration, 1);\n\n    // Adjust the values for the percentage complete.\n    var args = [];\n    var i = 0;\n    var len = start.length;\n    for (; i < len; i++) {\n      args[i] = start[i] + (end[i] - start[i]) * per;\n    }\n\n    // Apply the values for each property.\n    i = 0;\n    len = prop.length;\n    var arg;\n    for (; i < len; i++) {\n\n      // If this is the last property but we have more arguments, set them all.\n      arg = i + 1 === len && args.length - 1 > i ? args.slice(i) : args[i];\n\n      if (typeof obj[prop[i]] === 'function') {\n        obj[prop[i]].apply(obj, arg);\n      } else {\n        obj[prop[i]] = arg;\n      }\n    }\n\n    // Keep going if we have more to do.\n    if (prog < duration) (0, _request2.default)(f);else callback();\n  };\n\n  return (0, _request2.default)(f);\n}\n\nexports.default = tween;\nmodule.exports = exports['default'];\n//# sourceMappingURL=tween.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Date helper\n * General helpers for working with dates.\n *\n * @module helpers/date/date.js\n */\n\nvar monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nvar dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar dayNamesShort = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'];\nvar adjustedDayNames = [];\nvar adjustedDayNamesShort = [];\nvar weekStartsOn = 0;\n\nvar dateHelper = {\n\n  /**\n   * Transform a date into an object of date values.\n   * @param {Date} date\n   * @return {Object}\n   */\n  create: function create(date) {\n\n    date = date instanceof Date ? date : new Date(date.year, date.month - 1, date.day);\n\n    var inst = Object.create(dateHelper);\n    inst._date = date;\n    inst._cache = {};\n\n    return inst;\n  },\n\n  /**\n   * Get a year.\n   * @return {Number}\n   */\n  get year() {\n    this._instanceCheck('year');\n    return this._date.getFullYear();\n  },\n\n  /**\n   * Set a year.\n   * @param {Number} y\n   */\n  set year(y) {\n    this._instanceCheck('year');\n    this._clearCache();\n    return this._date.setFullYear(y);\n  },\n\n  /**\n   * Get a month.\n   * @return {Number} 1-12\n   */\n  get month() {\n    this._instanceCheck('month');\n    return this._date.getMonth() + 1;\n  },\n\n  /**\n   * Set a month.\n   * @param {Number} m 1-12\n   */\n  set month(m) {\n    this._instanceCheck('month');\n    this._clearCache();\n    return this._date.setMonth(m - 1);\n  },\n\n  /**\n   * Get a day.\n   * @return {Number} 1-31\n   */\n  get day() {\n    this._instanceCheck('day');\n    return this._date.getDate();\n  },\n\n  /**\n   * Set a day.\n   * @param {Number} d 1-31\n   */\n  set day(d) {\n    this._instanceCheck('day');\n    this._clearCache();\n    return this._date.setDate(d);\n  },\n\n  /**\n   * Sets the day, month and year values at once.\n   * @param {Object} params\n   */\n  set: function set(params) {\n    params = params || {};\n    this.year = params.year || this.year;\n    this.month = params.month || this.month;\n    this.day = params.day || this.day;\n  },\n\n  /**\n   * Get the full name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthName: function getMonthName(num) {\n    return monthNames[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthName() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthName(this.month);\n  },\n\n  /**\n   * Get the list of month names.\n   * @return {Array}\n   */\n  getMonthNames: function getMonthNames() {\n    return monthNames;\n  },\n\n  /**\n   * Get the short name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthNameShort: function getMonthNameShort(num) {\n    return monthNamesShort[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthNameShort() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthNameShort(this.month);\n  },\n\n  /**\n   * Get the list of short month names.\n   * @return {Array}\n   */\n  getMonthNamesShort: function getMonthNamesShort() {\n    return monthNamesShort;\n  },\n\n  /**\n   * Set the month names.\n   * @param {Array} names\n   */\n  setMonthNames: function setMonthNames(names) {\n    if (names.length === 12) monthNames = names;\n  },\n\n  /**\n   * Set the short month names.\n   * @param {Array} names\n   */\n  setMonthNamesShort: function setMonthNamesShort(names) {\n    if (names.length === 12) monthNamesShort = names;\n  },\n\n  /**\n   * Get the day of the week for a given day.\n   * @param {Object} date\n   * @return {Number} 1-7\n   */\n  getDayOfWeek: function getDayOfWeek(date) {\n    var day = (date instanceof Date ? date : new Date(date.year, date.month - 1, date.day)).getDay() - weekStartsOn;\n    return (day < 0 ? 7 - Math.abs(day) : day) + 1;\n  },\n\n  /**\n   * Get the day of the week.\n   * @return {Number}\n   */\n  get dayOfWeek() {\n    return dateHelper.getDayOfWeek(this._date);\n  },\n\n  /**\n   * Get the full name of a day of the week.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayName: function getDayName(num) {\n    return dayNames[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the day name.\n   * @return {String}\n   */\n  get dayName() {\n    this._instanceCheck('dayName');\n    return dateHelper.getDayName(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNames: function getDayNames() {\n    return adjustedDayNames.length ? adjustedDayNames : dayNames;\n  },\n\n  /**\n   * Get the short name of the day.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayNameShort: function getDayNameShort(num) {\n    return dayNamesShort[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the short day name.\n   * @return {String}\n   */\n  get dayNameShort() {\n    this._instanceCheck('dayNameShort');\n    return dateHelper.getDayNameShort(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNamesShort: function getDayNamesShort() {\n    return adjustedDayNamesShort.length ? adjustedDayNamesShort : dayNamesShort;\n  },\n\n  /**\n   * Set the day names.\n   * @param {Array} names\n   */\n  setDayNames: function setDayNames(names) {\n    if (names.length === 7) dayNames = names;\n  },\n\n  /**\n   * Set the short day names.\n   * @param {Array} names\n   */\n  setDayNamesShort: function setDayNamesShort(names) {\n    if (names.length === 7) dayNamesShort = names;\n  },\n\n  /**\n   * Get the index of the first day of the week.\n   * @return {Number}\n   */\n  getWeekStartsOn: function getWeekStartsOn() {\n    return weekStartsOn;\n  },\n\n  /**\n   * Set the index of the first day of the week.\n   * @param {Number} index\n   * @return {String}\n   */\n  setWeekStartsOn: function setWeekStartsOn(number) {\n\n    weekStartsOn = number;\n\n    if (number) {\n      adjustedDayNames = dayNames.slice(weekStartsOn);\n      adjustedDayNames = adjustedDayNames.concat(dayNames.slice(0, weekStartsOn));\n      adjustedDayNamesShort = dayNamesShort.slice(weekStartsOn);\n      adjustedDayNamesShort = adjustedDayNamesShort.concat(dayNamesShort.slice(0, weekStartsOn));\n    } else {\n      adjustedDayNames = [];\n      adjustedDayNamesShort = [];\n    }\n  },\n\n  /**\n   * Get the current date.\n   * @return {Object}\n   */\n  now: function now() {\n    return dateHelper.create(new Date());\n  },\n\n  /**\n   * Get the next year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextYear: function getNextYear(date) {\n    return dateHelper.create(new Date(date.year + 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year following this.\n   * @return {Object}\n   */\n  get nextYear() {\n    this._instanceCheck('nextYear');\n    return this._cache.nextYear || (this._cache.nextYear = dateHelper.getNextYear(this));\n  },\n\n  /**\n   * Get the first day of the week for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getWeekStart: function getWeekStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, date.day - dateHelper.getDayOfWeek(date) + 1));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the start of the week for this date.\n   * @return {Object}\n   */\n  get weekStart() {\n    this._instanceCheck('weekStart');\n    return this._cache.weekStart && this._cache.weekStart.weekStartsOn === weekStartsOn ? this._cache.weekStart : this._cache.weekStart = dateHelper.getWeekStart(this);\n  },\n\n  /**\n   * Get the first day of the month for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthStart: function getMonthStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, 1));\n    return inst;\n  },\n\n  /**\n   * Get the start of the month for this date.\n   * @return {Object}\n   */\n  get monthStart() {\n    this._instanceCheck('monthStart');\n    return this._cache.monthStart || (this._cache.monthStart = dateHelper.getMonthStart(this));\n  },\n\n  /**\n   * Get the next week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextWeek: function getNextWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    return dateHelper.create(new Date(start.year, start.month - 1, start.day + 7));\n  },\n\n  /**\n   * Get the week following this.\n   * @return {Object}\n   */\n  get nextWeek() {\n    this._instanceCheck('nextWeek');\n    return this._cache.nextWeek || (this._cache.nextWeek = dateHelper.getNextWeek(this));\n  },\n\n  /**\n   * Get the next day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextDay: function getNextDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day + 1));\n  },\n\n  /**\n   * Get the day following this.\n   * @return {Object}\n   */\n  get nextDay() {\n    this._instanceCheck('nextDay');\n    return this._cache.nextDay || (this._cache.nextDay = dateHelper.getNextDay(this));\n  },\n\n  /**\n   * Get the next month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextMonth: function getNextMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the next month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 7 && date.month !== 12) {\n      // Adjust for months ending in 31 followed by months ending in 30\n      return dateHelper.create(new Date(date.year, date.month, date.day - 1));\n    } else if (date.day > 28 && date.month === 1) {\n      // fix for last day of February\n      return dateHelper.create(new Date(date.year, date.month + 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month, date.day));\n    }\n  },\n\n  /**\n   * Get the month following this.\n   * @return {Object}\n   */\n  get nextMonth() {\n    this._instanceCheck('nextMonth');\n    return this._cache.nextMonth || (this._cache.nextMonth = dateHelper.getNextMonth(this));\n  },\n\n  /**\n   * Get the previous year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousYear: function getPreviousYear(date) {\n    return dateHelper.create(new Date(date.year - 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year preceding this.\n   * @return {Object}\n   */\n  get previousYear() {\n    this._instanceCheck('previousYear');\n    return this._cache.previousYear || (this._cache.previousYear = dateHelper.getPreviousYear(this));\n  },\n\n  /**\n   * Get the previous week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousWeek: function getPreviousWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    var inst = dateHelper.create(new Date(start.year, start.month - 1, start.day - 7));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the week preceding this.\n   * @return {Object}\n   */\n  get previousWeek() {\n    this._instanceCheck('previousWeek');\n    return this._cache.previousWeek || (this._cache.previousWeek = dateHelper.getPreviousWeek(this));\n  },\n\n  /**\n   * Get the previous day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousDay: function getPreviousDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day - 1));\n  },\n\n  /**\n   * Get the day preceding this.\n   * @return {Object}\n   */\n  get previousDay() {\n    this._instanceCheck('previousDay');\n    return this._cache.previousDay || (this._cache.previousDay = dateHelper.getPreviousDay(this));\n  },\n\n  /**\n   * Get the previous month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousMonth: function getPreviousMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the previous month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 3 && date.month !== 8) {\n      // Adjust for months ending in 31 that follow months ending in 30\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day - 1));\n    } else if (date.day > 28 && date.month === 3) {\n      // Adjust for last day of February\n      return dateHelper.create(new Date(date.year, date.month - 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day));\n    }\n  },\n\n  /**\n   * Get the month preceding this.\n   * @return {Object}\n   */\n  get previousMonth() {\n    this._instanceCheck('previousMonth');\n    return this._cache.previousMonth || (this._cache.previousMonth = dateHelper.getPreviousMonth(this));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthEnd: function getMonthEnd(date) {\n    return dateHelper.create(new Date(date.year, date.month, 0));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @return {Object}\n   */\n  get monthEnd() {\n    this._instanceCheck('monthEnd');\n    return this._cache.monthEnd || (this._cache.monthEnd = dateHelper.getMonthEnd(this));\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equal: function equal(date, compare, full) {\n    return this.equalDay(date, compare, full);\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalDay: function equalDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (compare[i] && date.year === compare[i].year && date.month === compare[i].month && date.day === compare[i].day) matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalWeek: function equalWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.equalDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalMonth: function equalMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year || date.year === compare[i].year && date.month !== compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalYear: function equalYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  before: function before(date, compare, full) {\n    return this.beforeDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeDay: function beforeDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date >= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeWeek: function beforeWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.beforeDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeMonth: function beforeMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year > compare[i].year || date.year === compare[i].year && date.month >= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeYear: function beforeYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year >= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  after: function after(date, compare, full) {\n    return this.afterDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterDay: function afterDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date <= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterWeek: function afterWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.afterDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterMonth: function afterMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year < compare[i].year || date.year === compare[i].year && date.month <= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterYear: function afterYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year <= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Get the earliest date in an array.\n   * @return {Object}\n   */\n  earliest: function earliest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var e = void 0;\n\n    for (; i < len; i++) {\n      if (!e || arr[i].before(e)) e = arr[i];\n    }\n\n    return e;\n  },\n\n  /**\n   * Get the latest date in an array.\n   * @return {Object}\n   */\n  latest: function latest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var l = void 0;\n\n    for (; i < len; i++) {\n      if (!l || arr[i].after(l)) l = arr[i];\n    }\n\n    return l;\n  },\n\n  /**\n   * Clone a date instance.\n   * @param {Object} date\n   * @return {Object}\n   */\n  clone: function clone(date) {\n\n    // If we weren't passed a date, use this instance.\n    if (!date && this._date && this._date instanceof Date && dateHelper.isPrototypeOf(this)) {\n      date = this;\n    }\n\n    // No date, can't clone.\n    if (!date) {\n      throw new Error('Must pass a date to clone or call on an instance.');\n    }\n\n    return dateHelper.create(new Date(date._date.valueOf()));\n  },\n\n  /**\n   * If a comparison function is called on an instance, properly\n   * assign the vars.\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full\n   */\n  _checkComparisonArgs: function _checkComparisonArgs(date, compare, full) {\n\n    if (compare === undefined || typeof compare === 'boolean') {\n\n      if (!dateHelper.isPrototypeOf(this)) {\n        throw new Error('Cannot compare only one date!');\n      }\n\n      full = compare;\n      compare = date;\n      date = this;\n    }\n\n    compare = compare instanceof Array ? compare : [compare];\n\n    return [date, compare, full];\n  },\n\n  /**\n   * Check to see if we have an instance of the date object.\n   * @param  {String} prop\n   */\n  _instanceCheck: function _instanceCheck(prop) {\n    if (!this._date || !(this._date instanceof Date) || !dateHelper.isPrototypeOf(this)) throw new Error('Cannot access the property \"' + prop + '\" of the date helper with creating an instance!');\n  },\n\n  /**\n   * Clear the cache.\n   */\n  _clearCache: function _clearCache() {\n    this._instanceCheck('clearCache');\n    this._cache = {};\n  }\n};\n\nexports.default = dateHelper;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _pad = require('../util/pad');\n\nvar _pad2 = _interopRequireDefault(_pad);\n\nvar _date = require('./date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Map characters to their special meanings.\n * @type {Object}\n */\n/**\n * # Parse Date Format\n * Given a date format string, break it down into pieces.\n *\n * @example\n * parseDateFormat('MM-DD-YYYY');\n *\n * @module helpers/date/parse-format.js\n */\n\nvar map = {\n  d: 'day',\n  m: 'month',\n  y: 'year',\n  '-': 'divider',\n  '/': 'divider',\n  ' ': 'space'\n};\n\n/**\n * Given a format and a string, get the day, month and year values from that string.\n * @param {Object} format\n * @return {Function}\n */\nfunction getValues(format) {\n\n  return function (value) {\n\n    var i = 0;\n    var index = 0;\n    var len = format.length;\n    var values = {};\n\n    // Loop through all format pieces\n    for (; i < len; i++) {\n\n      // Only worry about date values\n      if (['day', 'month', 'year'].indexOf(format[i].name) !== -1) {\n\n        // If the passed value doesn't contain a format piece, it's invalid.\n        if (value.length < index + format[i].length) return;\n\n        values[format[i].name] = parseInt(value.substr(index, format[i].length), 10);\n      }\n      index += format[i].length;\n    }\n\n    return _date2.default.create(values);\n  };\n}\n\n/**\n * Create a formatted date string given an object of values.\n * @param {Object} format\n * @return {Function}\n */\nfunction getString(format) {\n\n  /**\n   * @param {Object} vals\n   * @return {String}\n   */\n  return function (vals) {\n\n    var i = 0;\n    var len = format.length;\n    var str = '';\n\n    for (; i < len; i++) {\n\n      // Numbers\n      if (vals[format[i].name]) {\n        str += (0, _pad2.default)(vals[format[i].name], format[i].length);\n      }\n      // Dividers\n      else {\n          str += format[i].value;\n        }\n    }\n\n    return str;\n  };\n}\n\n/**\n * @param {String} format\n * @return {Object}\n */\nfunction parseDateFormat(format) {\n\n  var f = format.toLowerCase();\n  var i = 0;\n  var len = f.length;\n\n  var obj = {\n    parts: []\n  };\n\n  for (; i < len; i++) {\n\n    // If there is a matching character mapping and the last part was of the same name, increment its length\n    // and add to its content.\n    if (map[f[i]] && obj.parts.length && obj.parts[obj.parts.length - 1].name === map[f[i]]) {\n      obj.parts[obj.parts.length - 1].length++;\n      obj.parts[obj.parts.length - 1].value += format[i];\n      continue;\n    }\n\n    obj.parts.push({\n      name: map[f[i]] ? map[f[i]] : '',\n      value: format[i],\n      length: 1\n    });\n  }\n\n  // Add a way to convert the parsed date into a regex-ish string that works with the Typeahead implementation.\n  obj.getValues = getValues(obj.parts);\n  obj.getString = getString(obj.parts);\n\n  return obj;\n}\n\nexports.default = parseDateFormat;\nmodule.exports = exports['default'];\n//# sourceMappingURL=parse-format.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Breakpoint Helpers\n * Find the active breakpoint.\n *\n * @param {Number} width\n *\n * @module helpers/dom/breakpoint.js\n */\n\n/**\n * Breakpoints being used in the CSS.\n * @type {Object}\n */\nvar defaultBreakpoints = {\n  xs: {\n    min: 0,\n    max: 543\n  },\n  sm: {\n    min: 544,\n    max: 795\n  },\n  md: {\n    min: 796,\n    max: 1047\n  },\n  lg: {\n    min: 1048,\n    max: 1799\n  },\n  xl: {\n    min: 1800,\n    max: Infinity\n  }\n};\n\nfunction get(width, breakpoints) {\n\n  breakpoints = breakpoints || defaultBreakpoints;\n\n  var i = void 0;\n\n  for (i in breakpoints) {\n    if (width >= breakpoints[i].min && width <= breakpoints[i].max) {\n      return i;\n    }\n  }\n}\n\nexports.get = get;\n//# sourceMappingURL=breakpoint.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Offset Position\n * Get the offset position of the element.\n *\n * @param {Element} el\n * @param {Boolean} viewPortOffset The offset relative to the viewport, not page.\n * @return {Object}\n *\n * @module helpers/dom/offset.js\n */\nfunction offset(el, viewPortOffset) {\n\n  var rect = {\n    top: 0,\n    left: 0\n  };\n\n  // Native implementation\n  if (el.getBoundingClientRect) {\n\n    var bounding = el.getBoundingClientRect();\n    rect.left = bounding.left;\n    rect.top = bounding.top;\n\n    if (!viewPortOffset) {\n      rect.left += typeof window.scrollX !== 'undefined' ? window.scrollX : window.pageXOffset;\n      rect.top += typeof window.scrollY !== 'undefined' ? window.scrollY : window.pageYOffset;\n    }\n  } else {\n    var x = 0,\n        y = 0;\n    do {\n      x += el.offsetLeft - (!viewPortOffset ? el.scrollLeft : 0);\n      y += el.offsetTop - (!viewPortOffset ? el.scrollTop : 0);\n    } while (el = el.offsetParent);\n\n    rect.left = x;\n    rect.top = y;\n  }\n\n  return rect;\n}\n\nexports.default = offset;\nmodule.exports = exports['default'];\n//# sourceMappingURL=offset.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trigger Event\n * Trigger a DOM event on an element.\n *\n * @param {Element} el\n * @param {String} name\n *\n * @module helpers/dom/trigger-event.js\n */\nfunction triggerEvent(el, name) {\n\n  var event = void 0;\n\n  if (document.createEvent) {\n    event = document.createEvent('HTMLEvents');\n    event.initEvent(name, true, true);\n    event.eventName = name;\n    el.dispatchEvent(event);\n  } else {\n    event = document.createEventObject();\n    event.eventType = name;\n    event.eventName = name;\n    el.fireEvent('on' + event.eventType, event);\n  }\n}\n\nexports.default = triggerEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trigger-event.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Build Select\n * Build a select input.\n *\n * @param {Object} params\n *\n * @example\n * buildSelect({\n *   attributes: {\n *     name: 'test',\n *     class: 'spark-select__field'\n *   },\n *   options: [1, 2, 3, 4, 5, 6]\n * });\n *\n * @example\n * buildSelect({\n *   attributes: {\n *     name: 'test',\n *     class: 'spark-select__field',\n *     'data-attr': 'thing',\n *      multiple: true\n *   },\n *   selected: [2, 4],\n *   options: [\n *     {text: 'One', value: 1},\n *     {text: 'Two', value: 2},\n *     {text: 'Three', value: 3},\n *     {text: 'Four', value: 4},\n *     {text: 'Five', value: 5},\n *   ]\n * });\n *\n * @module helpers/form/build-select.js\n */\n\nfunction buildSelect(params) {\n\n  var el = document.createElement('select');\n  var html = '';\n  var attrs = params.attributes;\n  var selected = params.selected instanceof Array ? params.selected : params.selected ? [params.selected] : [];\n  var opts = params.options;\n\n  var i = void 0;\n  var len = opts.length;\n\n  // Set attributes\n  for (i in attrs) {\n    el.setAttribute(i, attrs[i]);\n  }\n\n  // Add options\n  for (i = 0; i < len; i++) {\n    if (_typeof(opts[i]) === 'object') {\n      html += '<option value=\"' + opts[i].value + '\" ' + (selected.indexOf(opts[i].value) !== -1 ? 'selected' : '') + '>' + opts[i].text + '</option>';\n    } else {\n      html += '<option value=\"' + opts[i] + '\" ' + (selected.indexOf(opts[i]) !== -1 ? 'selected' : '') + '>' + opts[i] + '</option>';\n    }\n  }\n\n  el.innerHTML = html;\n\n  return el;\n}\n\nexports.default = buildSelect;\nmodule.exports = exports['default'];\n//# sourceMappingURL=build-select.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction appendChildren(el, children, empty) {\n\n  empty = empty === undefined ? false : empty;\n\n  if (empty) {\n    el.textContent = '';\n  }\n\n  var domList = children instanceof window.HTMLCollection;\n\n  if (domList) {\n    while (children.length) {\n      el.appendChild(children[0]);\n    }\n  } else {\n    (0, _each2.default)(children, function (c) {\n      if (c) {\n        el.appendChild(c);\n      }\n    });\n  }\n} /**\n   * # Append Children\n   * Append an array of children to a node.\n   *\n   * @param {Element} el\n   * @param {Array} children\n   * @param {Boolean} empty Empty the node before adding children?\n   *\n   * @module helpers/manipulation/append-children.js\n   */\n\nexports.default = appendChildren;\nmodule.exports = exports['default'];\n//# sourceMappingURL=append-children.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _offset2 = require('../dom/offset');\n\nvar _offset3 = _interopRequireDefault(_offset2);\n\nvar _boxPosition = require('./box-position');\n\nvar _boxPosition2 = _interopRequireDefault(_boxPosition);\n\nvar _debounce = require('../util/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Affix\n                                                                                                                                                           * Affix one element to another.\n                                                                                                                                                           *\n                                                                                                                                                           * @example\n                                                                                                                                                           * new Affix({\n                                                                                                                                                           *   el: el,\n                                                                                                                                                           *   targetEl: el2,\n                                                                                                                                                           *   caretEl: el3,\n                                                                                                                                                           *   anchorY: 'top', // 'middle', 'bottom'\n                                                                                                                                                           *   anchorX: 'left', // 'center', 'right'\n                                                                                                                                                           * })\n                                                                                                                                                           *\n                                                                                                                                                           * @module helpers/position/affix.js\n                                                                                                                                                           */\n\nvar Affix = function () {\n\n  /**\n   * Store the reference elements and position.\n   * @param  {Object} params\n   */\n  function Affix() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Affix);\n\n    this.el = params.el;\n    this.targetEl = params.targetEl;\n    this.caretEl = params.caretEl;\n    this.anchorY = params.anchorY || 'top';\n    this.anchorX = params.anchorX || 'center';\n    this.isFixed = params.isFixed || false;\n\n    this._addEventListeners();\n    this._insertEl();\n    this._setPosition();\n    this._updateDebounced = (0, _debounce2.default)(this.update.bind(this), 500);\n  }\n\n  /**\n   * Stop listening and clean up event listeners\n   * @param {Object} params Optional\n   * @return {Object} this\n   */\n\n\n  Affix.prototype.remove = function remove() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!params.keepEl) this._removeEl();\n    this._removeEventListeners();\n    return this;\n  };\n\n  /**\n   * Update the position.\n   * @return {Object} this\n   */\n\n\n  Affix.prototype.update = function update() {\n    this._setPosition();\n    return this;\n  };\n\n  /**\n   * Listen for window resizes to update the position.\n   */\n\n\n  Affix.prototype._addEventListeners = function _addEventListeners() {\n    this._onResizeBound = this._onResize.bind(this);\n    this._onScrollBound = this._onScroll.bind(this);\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('scroll', this._onScrollBound);\n  };\n\n  /**\n   * Remove event listeners\n   */\n\n\n  Affix.prototype._removeEventListeners = function _removeEventListeners() {\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('scroll', this._onScrollBound);\n  };\n\n  /**\n   * Insert the element into the DOM.\n   */\n\n\n  Affix.prototype._insertEl = function _insertEl() {\n    this.el.setAttribute('data-affixed', '');\n    this._getRootEl().appendChild(this.el);\n  };\n\n  /**\n   * Remove the element from the DOM.\n   */\n\n\n  Affix.prototype._removeEl = function _removeEl() {\n    this.el.parentNode.removeChild(this.el);\n    this.el.removeAttribute('data-affixed');\n  };\n\n  /**\n   * Set the position of the target element.\n   */\n\n\n  Affix.prototype._setPosition = function _setPosition() {\n\n    // Fixed position\n    this.el.style.setProperty('position', this.isFixed ? 'fixed' : 'absolute', 'important');\n\n    // Target element properties\n\n    var _offset = (0, _offset3.default)(this.targetEl, this.isFixed),\n        targetTop = _offset.top,\n        targetLeft = _offset.left;\n\n    var targetWidth = this.targetEl.offsetWidth;\n    var targetHeight = this.targetEl.offsetHeight;\n\n    // Element to affix properties\n    var elWidth = this.el.offsetWidth;\n    var elHeight = this.el.offsetHeight;\n\n    // Maxes\n    var docHeight = document.documentElement.offsetHeight;\n    var docWidth = document.documentElement.offsetWidth;\n\n    // Get the values\n\n    var _calculatePosition2 = this._calculatePosition({\n      anchorX: this.anchorX,\n      anchorY: this.anchorY,\n      targetTop: targetTop,\n      targetLeft: targetLeft,\n      elHeight: elHeight,\n      elWidth: elWidth,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      minX: 0,\n      minY: 0,\n      maxX: docWidth - elWidth,\n      maxY: Math.max(docHeight - elHeight, 0)\n    }),\n        elTop = _calculatePosition2.elTop,\n        elLeft = _calculatePosition2.elLeft;\n\n    // Position the caret\n\n\n    var _positionCaret2 = this._positionCaret({\n      elLeft: elLeft,\n      elTop: elTop,\n      elWidth: elWidth,\n      elHeight: elHeight,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      targetLeft: targetLeft,\n      targetTop: targetTop\n    }),\n        extraLeft = _positionCaret2.extraLeft,\n        extraTop = _positionCaret2.extraTop;\n\n    // Set the position\n\n\n    this.el.style.left = elLeft + extraLeft + 'px';\n    this.el.style.top = elTop + extraTop + 'px';\n  };\n\n  /**\n   * Get the proper top position for an anchor direction.\n   * @param  {Object} p\n   * @return {Object}\n   */\n\n\n  Affix.prototype._calculatePosition = function _calculatePosition(p) {\n\n    // Keep track of what we're trying to do here, so on subsequent, nested calls to this\n    // method we can see what has already been tried.\n    p.previousAttempts = (p.previousAttempts || 0) + 1;\n    p.previousChecks = p.previousChecks || [];\n\n    var finalCheck = p.previousAttempts > 3;\n    var top = void 0;\n    var left = void 0;\n\n    // Y-axis check\n    switch (p.anchorY) {\n      case 'bottom':\n        top = p.targetTop + p.targetHeight;\n        break;\n      case 'middle':\n        top = p.targetTop - (p.elHeight - p.targetHeight) / 2;\n        break;\n      default:\n        top = p.targetTop - p.elHeight;\n        break;\n    }\n\n    // Under min\n    if (top < p.minY) {\n\n      if (!finalCheck && p.previousChecks.indexOf('overY') === -1) {\n        p.previousChecks.push('underY');\n        p.anchorY = this._getNewAnchorY(true, p.anchorY, p.anchorX);\n        return this._calculatePosition(p);\n      } else {\n        top = p.minY;\n      }\n    }\n\n    // Don't check for being too tall because causing a vertical scroll\n    // bar down is okay and this saves us from some real positioning hell.\n    /*if (top > p.maxY) {\n       if (!finalCheck && p.previousChecks.indexOf('underY') === -1) {\n        p.previousChecks.push('overY');\n        p.anchorY = this._getNewAnchorY(false, p.anchorY, p.anchorX);\n        return this._calculatePosition(p);\n      }\n      // On a final check, bottom wins because at least we can scroll\n      else if (!(finalCheck && p.anchorY === 'bottom')) {\n        top = p.maxY;\n      }\n    }*/\n\n    // X-axis check\n    switch (p.anchorX) {\n      case 'right':\n        left = p.targetLeft + (p.anchorY !== 'middle' && !p.isOverlapping ? 0 : p.targetWidth);\n        break;\n      case 'center':\n        left = p.targetLeft - (p.elWidth - p.targetWidth) / 2;\n        break;\n      default:\n        left = p.targetLeft - p.elWidth + (p.anchorY !== 'middle' ? p.targetWidth : 0);\n        break;\n    }\n\n    // Under min\n    if (left < p.minX) {\n\n      if (!finalCheck && p.previousChecks.indexOf('overX') === -1) {\n        p.previousChecks.push('underX');\n        p.anchorX = this._getNewAnchorX(true, p.anchorX, p.anchorY);\n        return this._calculatePosition(p);\n      } else {\n        left = p.minX;\n      }\n    }\n\n    // Over max\n    if (left > p.maxX) {\n\n      if (!finalCheck && p.previousChecks.indexOf('underX') === -1) {\n        p.previousChecks.push('overX');\n        p.anchorX = this._getNewAnchorX(false, p.anchorX, p.anchorY);\n        return this._calculatePosition(p);\n      } else {\n        left = p.maxX;\n      }\n    }\n\n    // One element is covering another. Try to fix that, but bail out after four tries.\n    if ((0, _boxPosition2.default)({ width: p.elWidth, height: p.elHeight, left: left, top: top }, { width: p.targetWidth, height: p.targetHeight, left: p.targetLeft, top: p.targetTop }) === 'overlap') {\n\n      p.isOverlapping = true;\n\n      // Try Y\n      if (p.repositionY !== false) {\n\n        // Will start undefined, then true, then false. This limits us to entering\n        // this loop twice, once to try moving in each direction.\n        p.repositionY = !p.repositionY;\n\n        // First try to put above, then try to put below.\n        p.anchorY = this._getNewAnchorY(p.repositionY, 'middle', p.anchorX);\n\n        // Give us one more shot at positioning\n        p.previousAttempts--;\n\n        return this._calculatePosition(p);\n      }\n      // Try X\n      else if (p.repositionX !== false) {\n\n          // Will start undefined, then true, then false. This limits us to entering\n          // this loop twice, once to try moving in each direction.\n          p.repositionX = !p.repositionX;\n\n          // First try to put above, then try to put below.\n          p.anchorX = this._getNewAnchorX(p.repositionX, 'center', p.anchorY);\n\n          // Give us one more shot at positioning\n          p.previousAttempts--;\n\n          return this._calculatePosition(p);\n        }\n    }\n\n    return { elTop: top, elLeft: left, anchorX: p.anchorX, anchorY: p.anchorY };\n  };\n\n  /**\n   * Determine the new y-axis anchor\n   * @param  {Boolean} underMin Under the min?\n   * @param  {String} anchorY\n   * @param  {String} anchorX\n   * @return {String}\n   */\n\n\n  Affix.prototype._getNewAnchorY = function _getNewAnchorY(underMin, anchorY, anchorX) {\n\n    // If the x-axis is anchored in the center, skip\n    // trying to anchor to the middle because then we'd\n    // be overlaying the button.\n    if (anchorX === 'center' || anchorY === 'middle') {\n      return underMin ? 'bottom' : 'top';\n    } else {\n      return 'middle';\n    }\n  };\n\n  /**\n   * Determine the new y-axis anchor\n   * @param  {Boolean} underMin Under the min?\n   * @param  {String} anchorY\n   * @param  {String} anchorX\n   * @return {String}\n   */\n\n\n  Affix.prototype._getNewAnchorX = function _getNewAnchorX(underMin, anchorX, anchorY) {\n\n    // If the y-axis is anchored in the center, skip\n    // trying to anchor to the middle because then we'd\n    // be overlaying the button.\n    if (anchorY === 'middle' || anchorX === 'center') {\n      return underMin ? 'left' : 'right';\n    } else {\n      return 'center';\n    }\n  };\n\n  /**\n   * Set the position of the caret.\n   * @param {Object} p\n   * @return {Object}\n   */\n\n\n  Affix.prototype._positionCaret = function _positionCaret() {\n    var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n    if (!this.caretEl) return;\n\n    var caretPosition = (0, _boxPosition2.default)({ width: p.elWidth, height: p.elHeight, left: p.elLeft, top: p.elTop }, { width: p.targetWidth, height: p.targetHeight, left: p.targetLeft, top: p.targetTop });\n\n    var caretDimensions = this.caretEl.getBoundingClientRect();\n    var caretWidth = caretDimensions.width;\n    var caretHeight = caretDimensions.height;\n    var left = Math.min(p.elWidth, Math.max(0, p.targetLeft - p.elLeft + p.targetWidth / 2));\n    var top = Math.min(p.elHeight, Math.max(0, p.targetTop - p.elTop + p.targetHeight / 2));\n\n    this.caretEl.style.left = Math.round(left) + 'px';\n    this.caretEl.style.top = Math.round(top) + 'px';\n\n    var extraLeft = 0;\n    var extraTop = 0;\n\n    this.caretEl.setAttribute('data-position', caretPosition);\n\n    switch (caretPosition) {\n      case 'above':\n        extraTop = -caretWidth / 2;\n        break;\n      case 'below':\n        extraTop = caretWidth / 2;\n        break;\n      case 'left':\n        extraLeft = -caretHeight / 2;\n        break;\n      default:\n        extraLeft = caretHeight / 2;\n        break;\n    }\n\n    return {\n      extraLeft: extraLeft,\n      extraTop: extraTop\n    };\n  };\n\n  /**\n   * Get the root element. Want to check if there's a top-level form for working\n   * with ASP .NET pages.\n   */\n\n\n  Affix.prototype._getRootEl = function _getRootEl() {\n    var form = document.querySelector('body > form');\n    return form && form.getAttribute('data-affixed') === null ? form : document.body;\n  };\n\n  /**\n   * On resize, update the position.\n   */\n\n\n  Affix.prototype._onResize = function _onResize() {\n    this.update();\n  };\n\n  /**\n   * When the window scrolls, ensure the proper position of the popover.\n   */\n\n\n  Affix.prototype._onScroll = function _onScroll() {\n    this._updateDebounced();\n  };\n\n  return Affix;\n}();\n\nexports.default = Affix;\nmodule.exports = exports['default'];\n//# sourceMappingURL=affix.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (a, b) {\n\n  var aXSpan = a.left + a.width;\n  var aYSpan = a.top + a.height;\n  var bXSpan = b.left + b.width;\n  var bYSpan = b.top + b.height;\n\n  if (aXSpan <= b.left) return 'left'; // a is fully left of b\n  if (a.left >= bXSpan) return 'right'; // a is fully right of b\n  if (aYSpan <= b.top) return 'above'; // a is fully above b\n  if (a.top >= bYSpan) return 'below'; // a is fully below b\n\n  return 'overlap'; // boxes overlap\n};\n\nmodule.exports = exports['default']; /**\n                                      * # Box Position\n                                      * How is one element positioned relative to another?\n                                      *\n                                      * @example\n                                      * boxPosition(\n                                      * {width: 100, height: 300, left: 0, top: 0},\n                                      * {width: 200, height: 50, left: 100, top: 40}\n                                      * )\n                                      *\n                                      * @module helpers/position/box-position.js\n                                      *\n                                      * @param {Object} a\n                                      * @param {Object} b\n                                      * @return {String}\n                                      */\n//# sourceMappingURL=box-position.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getSiblingAfter(el, query) {\n\n  while (el = el.nextElementSibling) {\n    if ((0, _matches2.default)(el, query)) {\n      return el;\n    }\n  }\n\n  return null;\n} /**\n   * # Get Sibling After\n   * Get a nearest sibling after the given element which matches\n   * the given query selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-sibling-after.js\n   */\n\nexports.default = getSiblingAfter;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-sibling-after.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getSiblingBefore(el, query) {\n\n  while (el = el.previousElementSibling) {\n    if ((0, _matches2.default)(el, query)) {\n      return el;\n    }\n  }\n\n  return null;\n} /**\n   * # Get Sibling Before\n   * Get a nearest sibling before the given element which matches\n   * the given query selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-sibling-before.js\n   */\n\nexports.default = getSiblingBefore;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-sibling-before.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Has Parent\n * See if an element has another element for a parent.\n *\n * @param {Element} child\n * @param {Element} possibleParent\n * @return {Boolean}\n *\n * @module helpers/traversal/has-parent.js\n */\nfunction hasParent(child, possibleParent) {\n\n  var parent = child.parentNode;\n\n  while (parent) {\n\n    if (parent === possibleParent) {\n      return true;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n}\n\nexports.default = hasParent;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=has-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Debounce\n * Debounce a function call\n *\n * @param {Function} func\n * @param {Integer} delay\n *\n * @module helpers/util/debounce.js\n */\nfunction debounce(func, delay) {\n\n  var timer = void 0;\n\n  return function () {\n    var args = arguments;\n    if (timer) window.clearTimeout(timer);\n    timer = window.setTimeout(function () {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n\nexports.default = debounce;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=debounce.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Pad\n * Pad a number with leading zeros\n *\n * @param {Number} n\n * @param {Number} w\n * @param {String} c Optional String to pad with\n *\n * @example\n * pad(4, 2);\n *\n * @module helpers/util/pad.js\n */\nfunction pad(n, w, c) {\n  c = c || '0';\n  n = n + '';\n  return n.length >= w ? n : new Array(w - n.length + 1).join(c) + n;\n}\n\nexports.default = pad;\nmodule.exports = exports['default'];\n//# sourceMappingURL=pad.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Range\n * Create a range of numbers.\n *\n * @param {Number} start\n * @param {Number} stop\n * @param {Number} step Optional\n * @return {Array}\n *\n * @module helpers/util/range.js\n */\nfunction createRange(start, stop, step) {\n  if (stop == null) {\n    stop = start || 0;\n    start = 0;\n  }\n  if (!step) {\n    step = stop < start ? -1 : 1;\n  }\n\n  var length = Math.max(Math.ceil((stop - start) / step), 0);\n  var range = new Array(length);\n\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start;\n  }\n\n  return range;\n}\n\nexports.default = createRange;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=range.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}