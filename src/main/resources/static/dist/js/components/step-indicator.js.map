{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/step-indicator.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxnkpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"step-indicator.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\ntep Indicator\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Set of indicators represent different steps\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new StepIndicator(el, params);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/step-indicator.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar StepIndicator = function (_BaseComponent) {\n  _inherits(StepIndicator, _BaseComponent);\n\n  /**\n   * StepIndicator constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function StepIndicator(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, StepIndicator);\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._calculateStyle();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  StepIndicator.prototype.update = function update(el) {\n\n    this._removeEventListeners();\n    this._cacheElements(el || this.el);\n    this._parseParams();\n    this._addEventListeners();\n    this._calculateStyle();\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the element.\n   * @param {Element} el\n   */\n\n\n  StepIndicator.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.containerEl = this.containerEl || el.parentNode;\n    this._body = this.el.querySelector('.spark-step-indicator__body');\n    this._list = this.el.querySelector('.spark-step-indicator__list');\n    this._items = this.el.querySelectorAll('.spark-step-indicator__item');\n  };\n\n  /**\n   * Parse parameters from the element.\n   */\n\n\n  StepIndicator.prototype._parseParams = function _parseParams() {\n    this.type = this.type !== null ? this.type : this.el.attributes['data-type'] && this.el.attributes['data-type'].value;\n    this.header = this.header !== null ? this.header : this.el.attributes['data-header'] && true;\n    this.subtitle = this.subtitle !== null ? this.subtitle : this.el.attributes['data-subtitle'] && true;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  StepIndicator.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onResizeBound = this._onResize.bind(this);\n    this._onLoadBound = this._onLoad.bind(this);\n    this._onVisibleBound = this._onVisible.bind(this);\n    this._toggleDropdownBound = this._toggleDropdown.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  StepIndicator.prototype._addEventListeners = function _addEventListeners() {\n    window.addEventListener('resize', this._onResizeBound);\n    document.addEventListener('spark.visible-children', this._onVisibleBound, true);\n    window.addEventListener('load', this._onLoadBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  StepIndicator.prototype._removeEventListeners = function _removeEventListeners() {\n    window.removeEventListener('resize', this._onResizeBound);\n    document.removeEventListener('spark.visible-children', this._onVisibleBound, true);\n    document.removeEventListener('click', this._toggleDropdownBound);\n    window.removeEventListener('load', this._onLoadBound);\n  };\n\n  /**\n   * Change selected step state into incomplete\n   * @param {Int} index of selected step\n   */\n\n\n  StepIndicator.prototype._resetStepState = function _resetStepState(stepIndex) {\n    if (stepIndex < 0 || stepIndex >= this._items.length) {\n      return;\n    }\n    (0, _removeClass2.default)(this._items[stepIndex], ['spark-step-indicator__item--completed', 'spark-step-indicator__item--current', 'spark-step-indicator__item--disabled']);\n  };\n\n  /**\n   * Set selected step state: completed/current/disabled/incomplete\n   * For current step, will remove current step from other steps\n   * @param {Int} index of selected step\n   * @param {String} state to be set\n   */\n\n\n  StepIndicator.prototype.setStepState = function setStepState(stepIndex, state) {\n    if (stepIndex < 0 || stepIndex >= this._items.length) {\n      return this;\n    }\n    switch (state) {\n      case 'completed':\n        this._resetStepState(stepIndex);\n        (0, _addClass2.default)(this._items[stepIndex], 'spark-step-indicator__item--completed');\n        break;\n      case 'current':\n        var currentStep = this._list.querySelector('.spark-step-indicator__item--current');\n        (0, _removeClass2.default)(currentStep, 'spark-step-indicator__item--current');\n        (0, _addClass2.default)(this._items[stepIndex], 'spark-step-indicator__item--current');\n        break;\n      case 'disabled':\n        this._resetStepState(stepIndex);\n        (0, _addClass2.default)(this._items[stepIndex], 'spark-step-indicator__item--disabled');\n        break;\n      case 'incomplete':\n        this._resetStepState(stepIndex);\n        break;\n    }\n    this._calculateStyle();\n    return this;\n  };\n\n  /**\n   * Provide a method to bind click callback function to certain step.\n   * @param {Array} a set of step indices represent the target of callback\n   * @param {Function} callback function\n   */\n\n\n  StepIndicator.prototype.bindStepClickCallback = function bindStepClickCallback(indexArr, callback) {\n    callback = callback || noop;\n    for (var i = 0; i < indexArr.length; i++) {\n      this._items[indexArr[i]].addEventListener('click', callback);\n    }\n    return this;\n  };\n\n  /**\n   * Remove click callback from steps\n   * @param {Array} a set of step indices represent the target of callback\n   * @param {Function} callback function\n   *\n   */\n\n\n  StepIndicator.prototype.removeStepClickCallback = function removeStepClickCallback(indexArr, callback) {\n    callback = callback || noop;\n    for (var i = 0; i < indexArr.length; i++) {\n      this._items[indexArr[i]].removeEventListener('click', callback);\n    }\n    return this;\n  };\n\n  /**\n   * Work for _calculateStyle.\n   * Comparing the width of list and total items, including padding\n   * Sometimes after calculating, even itemTotalWidth is bigger 1px than listWidth,\n   * it also means items are fit in the list, not over width.\n   * So add 2px to list width when comparing to avoid this.\n   * @return {Boolean}\n   */\n\n\n  StepIndicator.prototype._isOverWidth = function _isOverWidth() {\n    var listWidth = this._list.offsetWidth;\n    var itemTotalWidth = this._listPaddingTotal;\n    for (var i = 0; i < this._items.length; i++) {\n      itemTotalWidth += this._items[i].offsetWidth;\n    }\n    if (listWidth + 2 < itemTotalWidth) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Calcuate different style based settings\n   */\n\n\n  StepIndicator.prototype._calculateStyle = function _calculateStyle() {\n    if (!this.header) {\n      var titleEl = this.el.querySelector('.spark-step-indicator__title');\n      titleEl.style.display = 'none';\n      (0, _addClass2.default)(this._body, 'spark-step-indicator__body--no-border');\n    }\n    if (!this.subtitle) {\n      var subtitleEl = this.el.querySelector('.spark-step-indicator__subtitle');\n      subtitleEl.style.display = 'none';\n    }\n    // Remove special DOM and Class of dropdown variation\n    this._switchFromDropdown();\n    switch (this.type) {\n      case 'standard-dropdown':\n        this._calculateRespStyle();\n        break;\n      case 'large':\n        this._calculateLargeStyle();\n        break;\n      case 'condensed':\n        this._calculateCondensedStyle();\n        break;\n      case 'dropdown':\n        this._calculateDropdownStyle();\n        break;\n      default:\n        this._calculateStandardStyle();\n    }\n    // Work for IE11, detect IE11 via userAgent\n    // userAgent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv 11.0) like Gecko\n    var isIE11 = !!(navigator.userAgent.match(/Trident/) && navigator.userAgent.match(/rv[ :]11/));\n    if (isIE11) {\n      this._addItemWidth();\n    }\n  };\n\n  /**\n   * For IE11 ONLY, Add width: 100% to work around IE11 bug\n   * IE11 will have incorrect position with flex-grow max-width and justify-content when items hit max-width\n   * Sometimes after calculating, even itemTotalWidth is less 1px than listWidth,\n   * it also means items are fit in the list, not hit the max-width\n   * So add 2px to list width when comparing to avoid this.\n   */\n\n\n  StepIndicator.prototype._addItemWidth = function _addItemWidth() {\n    if (!(0, _hasClass2.default)(this._list, 'spark-step-indicator__list--condensed') && !(0, _hasClass2.default)(this._body, 'spark-step-indicator__body--dropdown')) {\n      var listWidth = this._list.offsetWidth;\n      var itemTotalWidth = this._listPaddingTotal;\n      for (var i = 0; i < this._items.length; i++) {\n        itemTotalWidth += this._items[i].offsetWidth;\n      }\n      if (listWidth - itemTotalWidth > 2) {\n        this._switchWidthForIe11(0, true);\n      } else {\n        this._switchWidthForIe11(0, false);\n      }\n    } else {\n      this._switchWidthForIe11(0, false);\n    }\n  };\n\n  /**\n   * Switch spark-step-indicator__item style width: 100% to work around IE11 bug\n   * @param {Number} start index of step\n   * @param {Boolean} whether add width: 100%\n   */\n\n\n  StepIndicator.prototype._switchWidthForIe11 = function _switchWidthForIe11(index, val) {\n    for (var i = index; i < this._items.length; i++) {\n      this._items[i].style.width = val ? '100%' : '';\n    }\n  };\n\n  /**\n   * Fix on large variation\n   * Calculate node and list length remove connect line of each end\n   * Sometimes after calculating, even itemTotalWidth is bigger 1px than listWidth,\n   * it also means items are fit in the list, not over width.\n   * So add 2px to list width when comparing to avoid this.\n   * Dependency of _calculateCondensedStyle() and _calculateStandardStyle()\n   *\n   */\n\n\n  StepIndicator.prototype._calculateLargeStyle = function _calculateLargeStyle() {\n    this._list.style['flex-wrap'] = 'wrap';\n    var listWidth = this._list.offsetWidth;\n    var itemTotalWidth = this._listPaddingTotal;\n    for (var i = 0; i < this._items.length; i++) {\n      (0, _removeClass2.default)(this._items[i], 'noline');\n      itemTotalWidth += this._items[i].offsetWidth;\n      if (listWidth + 2 < itemTotalWidth && i > 0) {\n        (0, _addClass2.default)(this._items[i - 1], 'noline');\n        itemTotalWidth = this._items[i].offsetWidth + this._listPaddingTotal;\n      }\n    }\n  };\n\n  /**\n   * Fix on condensed variation\n   * Same as fix large variation except CSS class\n   */\n\n\n  StepIndicator.prototype._calculateCondensedStyle = function _calculateCondensedStyle() {\n    (0, _addClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n    this._calculateLargeStyle();\n  };\n\n  /**\n   * Fix on dropdown variation\n   */\n\n\n  StepIndicator.prototype._calculateDropdownStyle = function _calculateDropdownStyle() {\n    this._switchToDropdown();\n  };\n\n  /**\n   * Change only between large and condensed variation\n   * no dropdown variation\n   */\n\n\n  StepIndicator.prototype._calculateStandardStyle = function _calculateStandardStyle() {\n    this._list.style.visibility = 'hidden';\n    for (var i = 0; i < this._items.length; i++) {\n      (0, _removeClass2.default)(this._items[i], 'noline');\n    }\n    (0, _removeClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n    if (this._isOverWidth()) {\n      (0, _addClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n      this._calculateLargeStyle();\n    }\n    this._list.style.visibility = 'visible';\n  };\n\n  /**\n   * Make list invisible and change it into large variation at first.\n   * Switch variation from top to bottom to find the fit one\n   */\n\n\n  StepIndicator.prototype._calculateRespStyle = function _calculateRespStyle() {\n    this._list.style.visibility = 'hidden';\n    (0, _removeClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n    if (this._isOverWidth()) {\n      (0, _addClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n      if (this._isOverWidth()) {\n        (0, _removeClass2.default)(this._list, 'spark-step-indicator__list--condensed');\n        this._switchToDropdown();\n      }\n    }\n    this._list.style.visibility = 'visible';\n  };\n\n  /**\n   * Create header element for dropdown variation\n   * Try to find the current step of indicator and show it on the header\n   * if not found, show the first step\n   * @return {Object} header element of dropdown variation\n   */\n\n\n  StepIndicator.prototype._createDropdownHeader = function _createDropdownHeader() {\n    var el = document.createElement('a');\n    var currentStep = this._list.querySelector('.spark-step-indicator__item--current');\n    // Can not find current step\n    if (!currentStep) {\n      currentStep = this._items[0];\n    }\n    el.innerHTML = currentStep.innerHTML;\n    el.innerHTML += '<span class=\"spark-step-indicator__notice\">Select a Step</span>';\n\n    // Create label element like '2 of 7'\n    var stepNotice = document.createElement('span');\n    var currentIndex = Array.prototype.indexOf.call(this._items, currentStep);\n    stepNotice.innerHTML = currentIndex + 1 + ' of ' + this._items.length;\n    stepNotice.className = 'spark-step-indicator__label--dropdown';\n\n    el.appendChild(stepNotice);\n    el.className = currentStep.className;\n    (0, _addClass2.default)(el, 'spark-step-indicator__item--dropdown__header');\n    this._dropdownHeader = el;\n  };\n\n  /**\n   * Some extra event binder and DOM of dropdown variation need to be set\n   */\n\n\n  StepIndicator.prototype._switchToDropdown = function _switchToDropdown() {\n    (0, _addClass2.default)(this._body, 'spark-step-indicator__body--dropdown');\n    this._createDropdownHeader();\n    this._list.parentNode.insertBefore(this._dropdownHeader, this._list);\n    document.removeEventListener('click', this._toggleDropdownBound);\n    document.addEventListener('click', this._toggleDropdownBound);\n    (0, _addClass2.default)(this._list, 'collapse');\n  };\n\n  /**\n   * Remove extra event and DOM when switch variation from dropdown\n   */\n\n\n  StepIndicator.prototype._switchFromDropdown = function _switchFromDropdown() {\n    (0, _removeClass2.default)(this._body, 'spark-step-indicator__body--dropdown');\n    var header = this._list.parentNode.querySelector('.spark-step-indicator__item--dropdown__header');\n    document.removeEventListener('click', this._toggleDropdownBound);\n    if (header) {\n      this._list.parentNode.removeChild(header);\n    }\n    (0, _removeClass2.default)(this._list, 'collapse');\n  };\n\n  /**\n   * Toggle collapse/expand state of step list in dropdown variation\n   * If there is a scroll in dropdown variation, scroll to 'current' node\n   * @param {Object} Reference of DOM obj\n   * @param {Object} Event of click\n   */\n\n\n  StepIndicator.prototype._toggleDropdown = function _toggleDropdown(e) {\n    var target = e.target || e.srcElement;\n    if (this._dropdownHeader.contains(target)) {\n      if (!this._dropdownExpand) {\n        (0, _removeClass2.default)(this._list, 'collapse');\n        (0, _addClass2.default)(this._dropdownHeader, 'expand');\n        this._dropdownExpand = true;\n      } else {\n        (0, _addClass2.default)(this._list, 'collapse');\n        (0, _removeClass2.default)(this._dropdownHeader, 'expand');\n        this._dropdownExpand = false;\n      }\n    } else {\n      (0, _addClass2.default)(this._list, 'collapse');\n      (0, _removeClass2.default)(this._dropdownHeader, 'expand');\n      this._dropdownExpand = false;\n    }\n    if (this._list.offsetHeight > 0) {\n      var scrollMove = 0;\n      for (var i = 0; i < this._items.length; i++) {\n        if ((0, _hasClass2.default)(this._items[i], 'spark-step-indicator__item--current')) {\n          this._list.scrollTop = scrollMove;\n          break;\n        }\n        scrollMove += this._items[i].offsetHeight;\n      }\n    }\n  };\n\n  /**\n   * When the window finish loading\n   */\n\n\n  StepIndicator.prototype._onLoad = function _onLoad() {\n    // Cache list left + right padding for width calculating\n    var listStyles = getComputedStyle(this._list);\n    var listPaddingLeft = parseInt(listStyles.getPropertyValue('padding-left'), 10);\n    var listPaddingRight = parseInt(listStyles.getPropertyValue('padding-right'), 10);\n    this._listPaddingTotal = listPaddingLeft + listPaddingRight;\n    this._calculateStyle();\n  };\n\n  /**\n   * When the window is resized, base on params make some reponsive change.\n   */\n\n\n  StepIndicator.prototype._onResize = function _onResize() {\n    this._calculateStyle();\n  };\n\n  /**\n   * When a parent container shows its children and our element\n   * is inside of it, resize\n   * @param  {Object} e\n   */\n\n\n  StepIndicator.prototype._onVisible = function _onVisible(e) {\n    if (e.target.contains(this.el)) {\n      window.setTimeout(function () {\n        this._calculateStyle();\n      }.bind(this), 0);\n    }\n  };\n\n  return StepIndicator;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nStepIndicator.prototype._whitelistedParams = ['type', 'header', 'subtitle'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nStepIndicator.prototype.defaults = {\n  el: null,\n  containerEl: null,\n  header: null,\n  subtitle: null,\n  type: null,\n  _body: null,\n  _list: null,\n  _listPaddingTotal: 0,\n  _dropdownExpand: false,\n  _dropdownHeader: null,\n  _items: null,\n  _onResizeBound: null,\n  _onVisibleBound: null\n};\n\nexports.default = StepIndicator;\nmodule.exports = exports['default'];\n//# sourceMappingURL=step-indicator.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}