{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/date-select.js","js/dist/components/js/dist/components/select-input.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/date/date.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/make-element.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/mixin.js","js/dist/components/js/dist/helpers/util/trim.js","js/dist/components/js/dist/mixins/messaging.js","js/dist/components/js/dist/mixins/validation.js"],"names":[],"mappingsxnrhhppDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"date-select.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _selectInput = require('./select-input');\n\nvar _selectInput2 = _interopRequireDefault(_selectInput);\n\nvar _date = require('../helpers/date/date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nateSelect\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Create a select list of days, months or years.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new DateSelect(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/date-select.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nfunction createDefaultElement() {\n  var el = document.createElement('span');\n  el.className = 'spark-select';\n  el.innerHTML = '<select class=\"spark-select__input\"></select><span class=\"spark-label\"></span>';\n  return el;\n}\n\nvar DateSelect = function (_BaseComponent) {\n  _inherits(DateSelect, _BaseComponent);\n\n  /**\n   * DateSelect constructor\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  function DateSelect(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DateSelect);\n\n    // If the first argument is a plain object, create a default element\n    // since the user MUST provide additional params but the element\n    // is optional. Doing it this way to keep the arity the same\n    // as other components.\n    if (!(el instanceof HTMLElement)) {\n      params = el || {};\n      el = createDefaultElement();\n    }\n\n    var _this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params));\n\n    _this._bindEventListenerCallbacks();\n    _this._createSelect(el);\n    return _this;\n  }\n\n  /**\n   * Get the value.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {Mixed}\n   */\n\n\n  DateSelect.prototype.getValue = function getValue(asInt) {\n    return asInt ? parseInt(this.select.getValue(), 10) : this.select.getValue();\n  };\n\n  /**\n   * Set the value.\n   * @param {Mixed} val\n   */\n\n\n  DateSelect.prototype.setValue = function setValue(val) {\n    return this.select.setValue(val);\n  };\n\n  /**\n   * Clear the value.\n   */\n\n\n  DateSelect.prototype.clearValue = function clearValue() {\n    return this.select.clearValue();\n  };\n\n  /**\n   * Enable the input.\n   */\n\n\n  DateSelect.prototype.enable = function enable() {\n    return this.select.enable();\n  };\n\n  /**\n   * Disable the input.\n   */\n\n\n  DateSelect.prototype.disable = function disable() {\n    return this.select.disable();\n  };\n\n  /**\n   * Update the date select's options.\n   * @param {Object|Array} params\n   */\n\n\n  DateSelect.prototype.setOptions = function setOptions(params) {\n\n    params = params || {};\n\n    this.min = params.min || this.min;\n    this.max = params.max || this.max;\n    this.monthNames = params.monthNames || this.monthNames;\n    this.numericMonth = params.numericMonth || this.numericMonth;\n\n    if (this.type === 'year') {\n      if (params.min && !params.max) {\n        this.max = this.min + 100;\n      } else if (params.max && !params.min) {\n        this.min = this.max - 100;\n      }\n    }\n\n    var i = this.min ? this.min - 1 : 0;\n    var len = this.max || this.monthNames.length;\n    var opts = [{}];\n\n    for (; i < len; i++) {\n      opts.push({\n        value: i + 1,\n        text: this.monthNames ? this.monthNames[i] : i + 1\n      });\n    }\n\n    this.select.setOptions(opts);\n\n    return this;\n  };\n\n  /**\n   * Set the label text for the select input.\n   * @param {String} text Optional\n   */\n\n\n  DateSelect.prototype.setLabel = function setLabel(text) {\n    this.select.setLabel(text !== undefined ? text : this._getTypeText());\n    return this;\n  };\n\n  /**\n   * Create a select input helper.\n   * @param {Object} el\n   */\n\n\n  DateSelect.prototype._createSelect = function _createSelect(el) {\n\n    this.select = new _selectInput2.default(el, {\n      onChange: this._onSelectChangeBound,\n      onFocus: this._onSelectFocusBound,\n      onBlur: this._onSelectBlurBound\n    });\n\n    this.setOptions();\n    this.setLabel();\n  };\n\n  /**\n   * Cache elements.\n   * @param {Element} el\n   */\n\n\n  DateSelect.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.selectEl = this.el.querySelector('select');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  DateSelect.prototype._parseParams = function _parseParams() {\n\n    this.type = this.type !== null ? this.type : (0, _parseAttribute.string)(this.selectEl, 'data-type', 'day');\n\n    if (this.type === 'year') {\n      var date = new Date();\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', date.getFullYear() - 100);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', (this.min || date.getFullYear()) + 100);\n    } else if (this.type === 'month') {\n\n      this.monthNames = this.monthNames !== null ? this.monthNames : (0, _parseAttribute.string)(this.selectEl, 'data-month-names', null);\n      this.numericMonth = this.numericMonth !== null ? this.numericMonth : (0, _parseAttribute.boolean)(this.selectEl, 'data-numeric-month', false);\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', null);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', null);\n\n      // No monthNames yet and no min or max\n      if (!this.monthNames && !this.numericMonth && !this.min && !this.max) {\n        this.monthNames = this._getDefaultMonthNames();\n      } else if (!this.min && !this.max) {\n        this.min = 1;\n        this.max = 12;\n      }\n\n      if (typeof this.monthNames === 'string') {\n        this.monthNames = this.monthNames.split(',');\n      }\n    } else {\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', 1);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', 31);\n    }\n  };\n\n  /**\n   * Make a list of month options.\n   * @return {Array}\n   */\n\n\n  DateSelect.prototype._getDefaultMonthNames = function _getDefaultMonthNames() {\n    return _date2.default.getMonthNamesShort();\n  };\n\n  /**\n   * Get the text for this type of date select.\n   * @return {String}\n   */\n\n\n  DateSelect.prototype._getTypeText = function _getTypeText() {\n    return this.type.charAt(0).toUpperCase() + this.type.slice(1);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  DateSelect.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onSelectChangeBound = this._onSelectChange.bind(this);\n    this._onSelectFocusBound = this._onSelectFocus.bind(this);\n    this._onSelectBlurBound = this._onSelectBlur.bind(this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectChange = function _onSelectChange(val) {\n    (this.onChange || noop)(val, this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectFocus = function _onSelectFocus(val) {\n    (this.onFocus || noop)(val, this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectBlur = function _onSelectBlur(val) {\n    (this.onBlur || noop)(val, this);\n  };\n\n  return DateSelect;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nDateSelect.prototype._whitelistedParams = ['type', 'monthNames', 'numericMonth', 'min', 'max', 'onChange', 'onFocus', 'onBlur'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nDateSelect.prototype.defaults = {\n  el: null,\n  selectEl: null,\n  type: null,\n  monthNames: null,\n  min: null,\n  max: null,\n  select: null,\n  numericMonth: null,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  _onChangeBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null\n};\n\nexports.default = DateSelect;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date-select.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _mixin = require('../helpers/util/mixin');\n\nvar _mixin2 = _interopRequireDefault(_mixin);\n\nvar _messaging = require('../mixins/messaging');\n\nvar _messaging2 = _interopRequireDefault(_messaging);\n\nvar _validation = require('../mixins/validation');\n\nvar _validation2 = _interopRequireDefault(_validation);\n\nvar _makeElement = require('../helpers/dom/make-element');\n\nvar _makeElement2 = _interopRequireDefault(_makeElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nelectInput\nselect input container.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new SelectInput(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/select-input.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar SelectInput = function (_BaseComponent) {\n  _inherits(SelectInput, _BaseComponent);\n\n  /**\n   * SelectInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function SelectInput(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SelectInput);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Get the value.\n   * @return {String}\n   */\n\n\n  SelectInput.prototype.getValue = function getValue() {\n    return this.selectEl.value;\n  };\n\n  /**\n   * Set the value.\n   * @param {String|Number} val\n   */\n\n\n  SelectInput.prototype.setValue = function setValue(val) {\n\n    // Cast to a string for comparison\n    val = val + '';\n\n    var i = 0;\n    var len = this.selectEl.children.length;\n\n    for (; i < len; i++) {\n      if (this.selectEl.children[i].value === val) {\n        this.selectEl.children[i].selected = true;\n        this._updateClass();\n        (this.onChange || noop)(val, this);\n        return this;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Clear the selected value.\n   */\n\n\n  SelectInput.prototype.clearValue = function clearValue() {\n\n    var i = 0;\n    var len = this.selectEl.children.length;\n\n    for (; i < len; i++) {\n      if (this.selectEl.children[i].selected === true) {\n        this.selectEl.children[i].selected = false;\n        this._updateClass();\n        (this.onChange || noop)('', this);\n        return this;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Set the options.\n   * @param {Array} opts\n   */\n\n\n  SelectInput.prototype.setOptions = function setOptions(opts) {\n\n    var i = 0;\n    var len = opts.length;\n    var str = '';\n\n    // Store the index of the currently selected option so we can set\n    // it when we're all done.\n    var curIndex = this.selectEl.selectedIndex;\n\n    for (; i < len; i++) {\n      str += '<option ' + (opts[i].value !== undefined ? 'value=\"' + (opts[i].value || '') + '\"' : '') + '>' + (opts[i].text || '') + '</option>';\n    }\n\n    this.selectEl.innerHTML = str;\n    this.selectEl.selectedIndex = Math.min(len - 1, curIndex);\n\n    return this;\n  };\n\n  /**\n   * Set the value of the label.\n   * @param {String} text\n   */\n\n\n  SelectInput.prototype.setLabel = function setLabel(text) {\n    if (!this.labelEl) return this;\n    this.labelEl.innerHTML = text;\n    return this;\n  };\n\n  /**\n   * Disable entry into the input.\n   */\n\n\n  SelectInput.prototype.disable = function disable() {\n    this.selectEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable entry into the input.\n   */\n\n\n  SelectInput.prototype.enable = function enable() {\n    this.selectEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n\n\n  SelectInput.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.selectEl = this.el.querySelector('select');\n    this.labelEl = this.el.querySelector('.spark-label');\n\n    this.messageEl = this.el.querySelector('.spark-select__message') || (0, _makeElement2.default)('<span class=\"spark-select__message\"></span>');\n\n    if (!this.selectEl) {\n      throw new Error('A <select> element must be present!', this.el);\n    }\n\n    this._updateClass();\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  SelectInput.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onInputBound = this._onInput.bind(this);\n  };\n\n  /**\n   * Add event listeners for focus, blur and input.\n   */\n\n\n  SelectInput.prototype._addEventListeners = function _addEventListeners() {\n    this.selectEl.addEventListener('focus', this._onFocusBound);\n    this.selectEl.addEventListener('blur', this._onBlurBound);\n    this.selectEl.addEventListener('input', this._onInputBound);\n  };\n\n  /**\n   * Remove event listeners for focus, blur and input.\n   */\n\n\n  SelectInput.prototype._removeEventListeners = function _removeEventListeners() {\n    this.selectEl.removeEventListener('focus', this._onFocusBound);\n    this.selectEl.removeEventListener('blur', this._onBlurBound);\n    this.selectEl.removeEventListener('input', this._onInputBound);\n  };\n\n  /**\n   * Update the active class.\n   */\n\n\n  SelectInput.prototype._updateClass = function _updateClass() {\n    this.hasValue = this.selectEl.value ? true : false;\n    (0, _toggleClass2.default)(this.el, 'has-value', this.hasValue);\n    (0, _toggleClass2.default)(this.el, 'active', this.isActive);\n  };\n\n  /**\n   * When the input element gains focus.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onFocus = function _onFocus() {\n    this.isActive = true;\n    this._updateClass();\n    var value = this.getValue();\n    (this.onFocus || noop)(value, this);\n  };\n\n  /**\n   * When the input element loses focus.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onBlur = function _onBlur() {\n    this.isActive = false;\n    this._updateClass();\n    var value = this.getValue();\n    (this.onBlur || noop)(value, this);\n  };\n\n  /**\n   * When the value is about to change, run the validation, set the characters count\n   * and resize if we're a textarea.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onInput = function _onInput() {\n\n    this._updateClass();\n\n    var value = this.getValue();\n\n    if (value !== this.previousValue) {\n      this.previousValue = value;\n      (this.onChange || noop)(value, this);\n    }\n  };\n\n  return SelectInput;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nSelectInput.prototype._whitelistedParams = ['validate', 'onValidate', 'onChange', 'onFocus', 'onBlur'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nSelectInput.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  selectEl: null,\n  labelEl: null,\n  hasValue: false,\n  isActive: false,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  previousValue: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onInputBound: null\n};\n\n(0, _mixin2.default)(SelectInput.prototype, _messaging2.default, _validation2.default);\n\nexports.default = SelectInput;\nmodule.exports = exports['default'];\n//# sourceMappingURL=select-input.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Date helper\n * General helpers for working with dates.\n *\n * @module helpers/date/date.js\n */\n\nvar monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nvar dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar dayNamesShort = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'];\nvar adjustedDayNames = [];\nvar adjustedDayNamesShort = [];\nvar weekStartsOn = 0;\n\nvar dateHelper = {\n\n  /**\n   * Transform a date into an object of date values.\n   * @param {Date} date\n   * @return {Object}\n   */\n  create: function create(date) {\n\n    date = date instanceof Date ? date : new Date(date.year, date.month - 1, date.day);\n\n    var inst = Object.create(dateHelper);\n    inst._date = date;\n    inst._cache = {};\n\n    return inst;\n  },\n\n  /**\n   * Get a year.\n   * @return {Number}\n   */\n  get year() {\n    this._instanceCheck('year');\n    return this._date.getFullYear();\n  },\n\n  /**\n   * Set a year.\n   * @param {Number} y\n   */\n  set year(y) {\n    this._instanceCheck('year');\n    this._clearCache();\n    return this._date.setFullYear(y);\n  },\n\n  /**\n   * Get a month.\n   * @return {Number} 1-12\n   */\n  get month() {\n    this._instanceCheck('month');\n    return this._date.getMonth() + 1;\n  },\n\n  /**\n   * Set a month.\n   * @param {Number} m 1-12\n   */\n  set month(m) {\n    this._instanceCheck('month');\n    this._clearCache();\n    return this._date.setMonth(m - 1);\n  },\n\n  /**\n   * Get a day.\n   * @return {Number} 1-31\n   */\n  get day() {\n    this._instanceCheck('day');\n    return this._date.getDate();\n  },\n\n  /**\n   * Set a day.\n   * @param {Number} d 1-31\n   */\n  set day(d) {\n    this._instanceCheck('day');\n    this._clearCache();\n    return this._date.setDate(d);\n  },\n\n  /**\n   * Sets the day, month and year values at once.\n   * @param {Object} params\n   */\n  set: function set(params) {\n    params = params || {};\n    this.year = params.year || this.year;\n    this.month = params.month || this.month;\n    this.day = params.day || this.day;\n  },\n\n  /**\n   * Get the full name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthName: function getMonthName(num) {\n    return monthNames[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthName() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthName(this.month);\n  },\n\n  /**\n   * Get the list of month names.\n   * @return {Array}\n   */\n  getMonthNames: function getMonthNames() {\n    return monthNames;\n  },\n\n  /**\n   * Get the short name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthNameShort: function getMonthNameShort(num) {\n    return monthNamesShort[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthNameShort() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthNameShort(this.month);\n  },\n\n  /**\n   * Get the list of short month names.\n   * @return {Array}\n   */\n  getMonthNamesShort: function getMonthNamesShort() {\n    return monthNamesShort;\n  },\n\n  /**\n   * Set the month names.\n   * @param {Array} names\n   */\n  setMonthNames: function setMonthNames(names) {\n    if (names.length === 12) monthNames = names;\n  },\n\n  /**\n   * Set the short month names.\n   * @param {Array} names\n   */\n  setMonthNamesShort: function setMonthNamesShort(names) {\n    if (names.length === 12) monthNamesShort = names;\n  },\n\n  /**\n   * Get the day of the week for a given day.\n   * @param {Object} date\n   * @return {Number} 1-7\n   */\n  getDayOfWeek: function getDayOfWeek(date) {\n    var day = (date instanceof Date ? date : new Date(date.year, date.month - 1, date.day)).getDay() - weekStartsOn;\n    return (day < 0 ? 7 - Math.abs(day) : day) + 1;\n  },\n\n  /**\n   * Get the day of the week.\n   * @return {Number}\n   */\n  get dayOfWeek() {\n    return dateHelper.getDayOfWeek(this._date);\n  },\n\n  /**\n   * Get the full name of a day of the week.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayName: function getDayName(num) {\n    return dayNames[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the day name.\n   * @return {String}\n   */\n  get dayName() {\n    this._instanceCheck('dayName');\n    return dateHelper.getDayName(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNames: function getDayNames() {\n    return adjustedDayNames.length ? adjustedDayNames : dayNames;\n  },\n\n  /**\n   * Get the short name of the day.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayNameShort: function getDayNameShort(num) {\n    return dayNamesShort[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the short day name.\n   * @return {String}\n   */\n  get dayNameShort() {\n    this._instanceCheck('dayNameShort');\n    return dateHelper.getDayNameShort(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNamesShort: function getDayNamesShort() {\n    return adjustedDayNamesShort.length ? adjustedDayNamesShort : dayNamesShort;\n  },\n\n  /**\n   * Set the day names.\n   * @param {Array} names\n   */\n  setDayNames: function setDayNames(names) {\n    if (names.length === 7) dayNames = names;\n  },\n\n  /**\n   * Set the short day names.\n   * @param {Array} names\n   */\n  setDayNamesShort: function setDayNamesShort(names) {\n    if (names.length === 7) dayNamesShort = names;\n  },\n\n  /**\n   * Get the index of the first day of the week.\n   * @return {Number}\n   */\n  getWeekStartsOn: function getWeekStartsOn() {\n    return weekStartsOn;\n  },\n\n  /**\n   * Set the index of the first day of the week.\n   * @param {Number} index\n   * @return {String}\n   */\n  setWeekStartsOn: function setWeekStartsOn(number) {\n\n    weekStartsOn = number;\n\n    if (number) {\n      adjustedDayNames = dayNames.slice(weekStartsOn);\n      adjustedDayNames = adjustedDayNames.concat(dayNames.slice(0, weekStartsOn));\n      adjustedDayNamesShort = dayNamesShort.slice(weekStartsOn);\n      adjustedDayNamesShort = adjustedDayNamesShort.concat(dayNamesShort.slice(0, weekStartsOn));\n    } else {\n      adjustedDayNames = [];\n      adjustedDayNamesShort = [];\n    }\n  },\n\n  /**\n   * Get the current date.\n   * @return {Object}\n   */\n  now: function now() {\n    return dateHelper.create(new Date());\n  },\n\n  /**\n   * Get the next year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextYear: function getNextYear(date) {\n    return dateHelper.create(new Date(date.year + 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year following this.\n   * @return {Object}\n   */\n  get nextYear() {\n    this._instanceCheck('nextYear');\n    return this._cache.nextYear || (this._cache.nextYear = dateHelper.getNextYear(this));\n  },\n\n  /**\n   * Get the first day of the week for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getWeekStart: function getWeekStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, date.day - dateHelper.getDayOfWeek(date) + 1));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the start of the week for this date.\n   * @return {Object}\n   */\n  get weekStart() {\n    this._instanceCheck('weekStart');\n    return this._cache.weekStart && this._cache.weekStart.weekStartsOn === weekStartsOn ? this._cache.weekStart : this._cache.weekStart = dateHelper.getWeekStart(this);\n  },\n\n  /**\n   * Get the first day of the month for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthStart: function getMonthStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, 1));\n    return inst;\n  },\n\n  /**\n   * Get the start of the month for this date.\n   * @return {Object}\n   */\n  get monthStart() {\n    this._instanceCheck('monthStart');\n    return this._cache.monthStart || (this._cache.monthStart = dateHelper.getMonthStart(this));\n  },\n\n  /**\n   * Get the next week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextWeek: function getNextWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    return dateHelper.create(new Date(start.year, start.month - 1, start.day + 7));\n  },\n\n  /**\n   * Get the week following this.\n   * @return {Object}\n   */\n  get nextWeek() {\n    this._instanceCheck('nextWeek');\n    return this._cache.nextWeek || (this._cache.nextWeek = dateHelper.getNextWeek(this));\n  },\n\n  /**\n   * Get the next day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextDay: function getNextDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day + 1));\n  },\n\n  /**\n   * Get the day following this.\n   * @return {Object}\n   */\n  get nextDay() {\n    this._instanceCheck('nextDay');\n    return this._cache.nextDay || (this._cache.nextDay = dateHelper.getNextDay(this));\n  },\n\n  /**\n   * Get the next month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextMonth: function getNextMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the next month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 7 && date.month !== 12) {\n      // Adjust for months ending in 31 followed by months ending in 30\n      return dateHelper.create(new Date(date.year, date.month, date.day - 1));\n    } else if (date.day > 28 && date.month === 1) {\n      // fix for last day of February\n      return dateHelper.create(new Date(date.year, date.month + 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month, date.day));\n    }\n  },\n\n  /**\n   * Get the month following this.\n   * @return {Object}\n   */\n  get nextMonth() {\n    this._instanceCheck('nextMonth');\n    return this._cache.nextMonth || (this._cache.nextMonth = dateHelper.getNextMonth(this));\n  },\n\n  /**\n   * Get the previous year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousYear: function getPreviousYear(date) {\n    return dateHelper.create(new Date(date.year - 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year preceding this.\n   * @return {Object}\n   */\n  get previousYear() {\n    this._instanceCheck('previousYear');\n    return this._cache.previousYear || (this._cache.previousYear = dateHelper.getPreviousYear(this));\n  },\n\n  /**\n   * Get the previous week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousWeek: function getPreviousWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    var inst = dateHelper.create(new Date(start.year, start.month - 1, start.day - 7));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the week preceding this.\n   * @return {Object}\n   */\n  get previousWeek() {\n    this._instanceCheck('previousWeek');\n    return this._cache.previousWeek || (this._cache.previousWeek = dateHelper.getPreviousWeek(this));\n  },\n\n  /**\n   * Get the previous day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousDay: function getPreviousDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day - 1));\n  },\n\n  /**\n   * Get the day preceding this.\n   * @return {Object}\n   */\n  get previousDay() {\n    this._instanceCheck('previousDay');\n    return this._cache.previousDay || (this._cache.previousDay = dateHelper.getPreviousDay(this));\n  },\n\n  /**\n   * Get the previous month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousMonth: function getPreviousMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the previous month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 3 && date.month !== 8) {\n      // Adjust for months ending in 31 that follow months ending in 30\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day - 1));\n    } else if (date.day > 28 && date.month === 3) {\n      // Adjust for last day of February\n      return dateHelper.create(new Date(date.year, date.month - 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day));\n    }\n  },\n\n  /**\n   * Get the month preceding this.\n   * @return {Object}\n   */\n  get previousMonth() {\n    this._instanceCheck('previousMonth');\n    return this._cache.previousMonth || (this._cache.previousMonth = dateHelper.getPreviousMonth(this));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthEnd: function getMonthEnd(date) {\n    return dateHelper.create(new Date(date.year, date.month, 0));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @return {Object}\n   */\n  get monthEnd() {\n    this._instanceCheck('monthEnd');\n    return this._cache.monthEnd || (this._cache.monthEnd = dateHelper.getMonthEnd(this));\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equal: function equal(date, compare, full) {\n    return this.equalDay(date, compare, full);\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalDay: function equalDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (compare[i] && date.year === compare[i].year && date.month === compare[i].month && date.day === compare[i].day) matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalWeek: function equalWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.equalDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalMonth: function equalMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year || date.year === compare[i].year && date.month !== compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalYear: function equalYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  before: function before(date, compare, full) {\n    return this.beforeDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeDay: function beforeDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date >= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeWeek: function beforeWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.beforeDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeMonth: function beforeMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year > compare[i].year || date.year === compare[i].year && date.month >= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeYear: function beforeYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year >= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  after: function after(date, compare, full) {\n    return this.afterDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterDay: function afterDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date <= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterWeek: function afterWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.afterDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterMonth: function afterMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year < compare[i].year || date.year === compare[i].year && date.month <= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterYear: function afterYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year <= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Get the earliest date in an array.\n   * @return {Object}\n   */\n  earliest: function earliest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var e = void 0;\n\n    for (; i < len; i++) {\n      if (!e || arr[i].before(e)) e = arr[i];\n    }\n\n    return e;\n  },\n\n  /**\n   * Get the latest date in an array.\n   * @return {Object}\n   */\n  latest: function latest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var l = void 0;\n\n    for (; i < len; i++) {\n      if (!l || arr[i].after(l)) l = arr[i];\n    }\n\n    return l;\n  },\n\n  /**\n   * Clone a date instance.\n   * @param {Object} date\n   * @return {Object}\n   */\n  clone: function clone(date) {\n\n    // If we weren't passed a date, use this instance.\n    if (!date && this._date && this._date instanceof Date && dateHelper.isPrototypeOf(this)) {\n      date = this;\n    }\n\n    // No date, can't clone.\n    if (!date) {\n      throw new Error('Must pass a date to clone or call on an instance.');\n    }\n\n    return dateHelper.create(new Date(date._date.valueOf()));\n  },\n\n  /**\n   * If a comparison function is called on an instance, properly\n   * assign the vars.\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full\n   */\n  _checkComparisonArgs: function _checkComparisonArgs(date, compare, full) {\n\n    if (compare === undefined || typeof compare === 'boolean') {\n\n      if (!dateHelper.isPrototypeOf(this)) {\n        throw new Error('Cannot compare only one date!');\n      }\n\n      full = compare;\n      compare = date;\n      date = this;\n    }\n\n    compare = compare instanceof Array ? compare : [compare];\n\n    return [date, compare, full];\n  },\n\n  /**\n   * Check to see if we have an instance of the date object.\n   * @param  {String} prop\n   */\n  _instanceCheck: function _instanceCheck(prop) {\n    if (!this._date || !(this._date instanceof Date) || !dateHelper.isPrototypeOf(this)) throw new Error('Cannot access the property \"' + prop + '\" of the date helper with creating an instance!');\n  },\n\n  /**\n   * Clear the cache.\n   */\n  _clearCache: function _clearCache() {\n    this._instanceCheck('clearCache');\n    this._cache = {};\n  }\n};\n\nexports.default = dateHelper;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (html) {\n\n  if (!html) {\n    throw new Error('Cannot create element with no HTML!');\n  }\n\n  var el = document.createElement('div');\n  el.innerHTML = html;\n  var el2 = el.children[0];\n  el2.parentNode.removeChild(el2);\n  return el2;\n};\n\nmodule.exports = exports['default']; /**\n                                      * # Make Element\n                                      * Make en element using a string of HTML.\n                                      *\n                                      * @example\n                                      * makeElement('<div></div>');\n                                      *\n                                      * @module helpers/make-element.js\n                                      *\n                                      * @param {String} html\n                                      * @return {Element}\n                                      */\n//# sourceMappingURL=make-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (proto) {\n  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  (0, _each2.default)(mixins, function (mixin) {\n    for (var i in mixin) {\n      if (mixin.hasOwnProperty(i) && !proto[i]) proto[i] = mixin[i];\n    }\n  });\n};\n\nvar _each = require('./each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Mixin\n * Apply a mixin, or mixins, to an Object\n *\n * @example\n * mixin(proto, mix, mix2)\n *\n * @module helpers/util/mixin.js\n */\nmodule.exports = exports['default'];\n//# sourceMappingURL=mixin.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\n  /**\n   * Set the error state.\n   * @param {String} message Optional\n   */\n  setError: function setError(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearWarning();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-error', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearError: function clearError() {\n    this.el.removeAttribute('data-error', true);\n    return this;\n  },\n\n\n  /**\n   * Set the warning state.\n   * @param {String} message Optional\n   */\n  setWarning: function setWarning(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-warning', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearWarning: function clearWarning() {\n    this.el.removeAttribute('data-warning', true);\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   * @param {String} message Optional\n   */\n  setSuccess: function setSuccess(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearWarning();\n\n    this.el.setAttribute('data-success', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   */\n  clearSuccess: function clearSuccess() {\n    this.el.removeAttribute('data-success', true);\n    return this;\n  },\n\n\n  /**\n   * Clear all messages.\n   */\n  clearMessages: function clearMessages() {\n    this._hideMessage(function () {\n      this.clearError();\n      this.clearWarning();\n      this.clearSuccess();\n    }.bind(this));\n    return this;\n  },\n\n\n  /**\n   * Set the message text.\n   * @param {String} message\n   */\n  setMessage: function setMessage(message) {\n    this.messageEl.innerHTML = message;\n    return this;\n  },\n\n\n  /**\n   * Show the message\n   */\n  _showMessage: function _showMessage() {\n\n    if (!this.messageEl.parentNode) {\n      this.el.appendChild(this.messageEl);\n    }\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl\n    });\n  },\n\n\n  /**\n   * Hide the message.\n   * @param {Function} callback\n   */\n  _hideMessage: function _hideMessage(callback) {\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl,\n      toggleValue: 'none',\n      action: 'collapse',\n      onComplete: callback\n    });\n  },\n\n\n  /**\n   * Is the message currently visible?\n   * @return {Boolean}\n   */\n  _isMessageVisible: function _isMessageVisible() {\n    return this.el.getAttribute('data-error') || this.el.getAttribute('data-warning') || this.el.getAttribute('data-success');\n  }\n}; /**\n    * # Messaging Mixin\n    * Add functionality for showing messages related to a form field.\n    *\n    * @example\n    * mixin(Component, messaging);\n    *\n    * @module mixin/messaging.js\n    */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=messaging.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Validation Mixin\n * Add functionality for validating a form field's value.\n *\n * @example\n * mixin(Component, validation);\n *\n * @module mixin/validation.js\n */\n\nexports.default = {\n\n  /**\n   * Default validate function. This can be overridden by passing a\n   * custom validate method as a parameter. This really only helps out\n   * of the box for text inputs.\n   */\n  validate: function validate() {\n\n    var validate = this.validatePattern;\n\n    // Nothing to validate.\n    if (!this.onValidate || !validate) {\n      return this;\n    }\n\n    var re = new RegExp(validate);\n\n    this.onValidate(re.test(this.getValue()), this.getValue(), this);\n\n    return this;\n  }\n};\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=validation.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}