{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/typeahead.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/trigger-event.js","js/dist/components/js/dist/helpers/util/each.js"],"names":[],"mappingsxniCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"typeahead.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _triggerEvent = require('../helpers/dom/trigger-event');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nypeahead\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Listen to an input element and format it as the user types.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Typeahead(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/typeahead.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar noop = function noop() {};\n\nvar Typeahead = function (_BaseComponent) {\n  _inherits(Typeahead, _BaseComponent);\n\n  /**\n   * Typeahead constructor\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Typeahead(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Typeahead);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._maintainFocus(function () {\n      this._parseParams();\n      this._bindEventListenerCallbacks();\n      this._addEventListeners();\n    });\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Run the formatting.\n   * @param {Number} cursorIndex\n   */\n\n\n  Typeahead.prototype.run = function run(cursorIndex) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this.isRunning) return this;\n\n    this.isRunning = true;\n\n    var oldVal = this.inputEl.value;\n    var val = '';\n    var placeholder = '';\n    var i = 0;\n    var len = this.format.length;\n    var skipCount = 0;\n    var valDone = false;\n\n    for (; i < len; i++) {\n\n      // Add numbers\n      if (this.format[i] === '\\\\d') {\n\n        if (this.characters[i - skipCount]) {\n          val += this.characters[i - skipCount];\n        } else {\n          valDone = true;\n        }\n\n        placeholder += valDone ? this.placeholder[i] : '&nbsp;';\n      }\n      // Placeholder characters\n      else {\n\n          if (!valDone) {\n            val += this.format[i];\n          }\n\n          placeholder += this.format[i];\n\n          skipCount++;\n        }\n    }\n\n    if (this.isFocused) {\n      cursorIndex = cursorIndex === undefined ? this._getCaretEnd() : cursorIndex;\n    }\n\n    // If there are no characters, set the cursorIndex to be the last placeholder entry.\n    if (this.isFocused && !this.characters.length) {\n      cursorIndex = val.length;\n    }\n\n    // No characters and we shouldn't use just placeholder values\n    if (!this.characters.length && params.notOnlyPlaceholders) {\n      val = '';\n    }\n\n    this.inputEl.value = val;\n    this.placeholderEl.innerHTML = placeholder;\n\n    this._updateWidth();\n\n    if (this.isFocused) {\n      this._setCaretPositionTranslated(cursorIndex);\n    }\n\n    if (val !== oldVal) {\n      (0, _triggerEvent2.default)(this.inputEl, 'input');\n    }\n\n    this.isRunning = false;\n\n    if (val !== oldVal) {\n      (this.onChange || noop)(val, oldVal, this);\n    }\n\n    if (!this._atEnd && this.isFocused && this.characters.length === this.maxLength && this._caretIsAtEnd()) {\n      this._atEnd = true;\n      (this.onEnd || noop)(this);\n    } else {\n      this._atEnd = false;\n    }\n\n    return this;\n  };\n\n  /**\n   * Add a character to the characters array at a given index.\n   * @param {String} character\n   * @param {Number} start\n   * @param {Number} end\n   * @param {Boolean} skipCheck\n   */\n\n\n  Typeahead.prototype.addCharacterAtIndex = function addCharacterAtIndex(character, start, end, skipCheck) {\n\n    // Don't add at an index beyond what we can support.\n    if (this.maxLength && start >= this.maxLength) {\n      return this;\n    }\n\n    if (!skipCheck) {\n\n      var re;\n\n      // Try to build a regex for this format character.\n      try {\n        re = new RegExp(this.format[start]);\n      } catch (e) {\n        //\n      }\n\n      if (!re || !re.exec(character)) {\n        return this;\n      }\n    }\n\n    this.characters.splice(start, end - start, character);\n\n    // If we've added at an index that pushes the length beyond what we support,\n    // remove the trailing characters.\n    if (this.maxLength && this.characters.length > this.maxLength) {\n      this.characters.splice(this.maxLength, this.characters.length);\n    }\n\n    this.run(start + 1);\n\n    return this;\n  };\n\n  /**\n   * Add a character at the position of the caret.\n   * @param {String} character\n   */\n\n\n  Typeahead.prototype.addCharacterAtCaret = function addCharacterAtCaret(character) {\n\n    var pos = this._getCaretStart();\n    var re;\n\n    // If we're beyond the bounds of the format, stop.\n    if (this.format[pos] === undefined) {\n      (this.onEnd || noop)(this, character);\n      return this;\n    }\n\n    // Try to build a regex for this format character.\n    try {\n      re = new RegExp(this.format[pos]);\n    } catch (e) {}\n    //\n\n\n    // We couldn't build a regex (so it's invalid) or the regex failed (so it's invalid)\n    if (!re || !re.exec(character)) {\n      if (this._moveCaret('right')) {\n        this.addCharacterAtCaret(character);\n      }\n      return this;\n    }\n\n    this.addCharacterAtIndex(character, this._getCaretStartTranslated(), this._getCaretEndTranslated(), true);\n\n    return this;\n  };\n\n  /**\n   * Remove a character from the character array by index.\n   * @param {Number} index\n   * @param {Number} length Optional\n   * @param {Number} offset Optional\n   */\n\n\n  Typeahead.prototype.removeCharacterAtIndex = function removeCharacterAtIndex(index, length, offset) {\n\n    // Don't want a negative splice length or else we start\n    // removing characters from the end.\n    if (index + offset < 0) {\n      return this;\n    }\n\n    length = length !== undefined ? length : 1;\n    this.characters.splice(index + offset, length);\n    this.run(index + (offset || 1));\n\n    return this;\n  };\n\n  /**\n   * Remove the character at the caret.\n   * @param {Number} offset Optional An offset from the current position.\n   */\n\n\n  Typeahead.prototype.removeCharacterAtCaret = function removeCharacterAtCaret(offset) {\n\n    var start = this._getCaretStartTranslated();\n    var end = this._getCaretEndTranslated();\n    var length = 1;\n    var tmp;\n\n    if (start !== end) {\n\n      // If the end is less than the start, the user dragged from right to left.\n      // Just swap them to make it easier to handle.\n      if (end < start) {\n        tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      // The length of characters removed\n      length = end - start;\n\n      // Bump the start position @todo: haven't thought through why this is, but it's needed.\n      start++;\n    }\n\n    this.removeCharacterAtIndex(start, length, offset);\n\n    return this;\n  };\n\n  /**\n   * Remove the character in the current range.\n   */\n\n\n  Typeahead.prototype.removeCharactersInRange = function removeCharactersInRange() {\n    this.removeCharacterAtIndex(this._getCaretStartTranslated(), this._getCaretEndTranslated());\n    return this;\n  };\n\n  /**\n   * Set the value of the typeahead. Maintain the position of the caret.\n   * @param {String} value\n   */\n\n\n  Typeahead.prototype.setValue = function setValue(value) {\n\n    this.settingValue = true;\n    this.pause();\n\n    this.characters = (value + '').split('');\n    this.run();\n\n    if (this.isFocused) this._setCaretPosition(this._getCaretStart());\n\n    this.resume();\n    this.settingValue = false;\n\n    return this;\n  };\n\n  /**\n   * Get the value of the typeahead.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {String|Number}\n   */\n\n\n  Typeahead.prototype.getValue = function getValue(asInt) {\n    return asInt && this.inputEl.value ? parseInt(this.inputEl.value, 10) : this.inputEl.value;\n  };\n\n  /**\n   * Clear the selected value.\n   */\n\n\n  Typeahead.prototype.clearValue = function clearValue() {\n    this.pause();\n    this.characters = [];\n    this.run(0, { notOnlyPlaceholders: true });\n    return this.resume();\n  };\n\n  /**\n   * Take the date values from the inputs and set them as dates on the calendar.\n   */\n\n\n  Typeahead.prototype.updateValue = function updateValue() {\n    return this.setValue(this.inputEl.value);\n  };\n\n  /**\n   * Move the caret position.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype.moveCaret = function moveCaret(pos) {\n    this._setCaretPositionTranslated(pos);\n    return this;\n  };\n\n  /**\n   * Move the caret to the end of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToEnd = function moveCaretToEnd() {\n    return this.moveCaret(this.characters.length);\n  };\n\n  /**\n   * Move the caret to the start of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToStart = function moveCaretToStart() {\n    return this.moveCaret(0);\n  };\n\n  /**\n   * Pause events.\n   */\n\n\n  Typeahead.prototype.pause = function pause() {\n    this.pauseBlurFocus++;\n    return this;\n  };\n\n  /**\n   * Resume events.\n   */\n\n\n  Typeahead.prototype.resume = function resume() {\n    this.pauseBlurFocus--;\n    return this;\n  };\n\n  /**\n   * Disable entry into the input.\n   */\n\n\n  Typeahead.prototype.disable = function disable() {\n    this.inputEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable entry into the input.\n   */\n\n\n  Typeahead.prototype.enable = function enable() {\n    this.inputEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Clear the value.\n   * Changed to clearValue in v2.0.0.\n   */\n\n\n  Typeahead.prototype.clear = function clear() {\n    return this.clearValue();\n  };\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Typeahead.prototype.remove = function remove(leaveElement) {\n    _BaseComponent.prototype.remove.call(this, leaveElement);\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Object} el\n   */\n\n\n  Typeahead.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.inputEl = this.el.querySelector('[type=\"text\"], [type=\"email\"], [type=\"phone\"], textarea') || this._createDefaultInputElement();\n    this.placeholderEl = this.el.querySelector('.spark-input__placeholder') || this._createDefaultPlaceholderElement();\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  Typeahead.prototype._parseParams = function _parseParams() {\n\n    // Store the value characters\n    this.characters = this._parseCharacters(this.inputEl.value);\n\n    // Store format\n    this.format = this._parseFormat(this.format ? this.format : this.inputEl.getAttribute('data-typeahead-format'));\n\n    // Store the original placeholder\n    this.placeholder = this.placeholder ? this.placeholder : this.inputEl.getAttribute('placeholder').split('');\n\n    // Get the total number of characters we can have\n    this.maxLength = this._getCharactersAllowedCount(this.format);\n\n    this.matchPlaceholderSize = this.matchPlaceholderSize !== null ? this.matchPlaceholderSize : (0, _parseAttribute.boolean)(this.inputEl, 'data-match-placeholder-size', false);\n  };\n\n  /**\n   * Parse the format string into an array.\n   * @param  {String} format\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseFormat = function _parseFormat(format) {\n\n    var i = 0;\n    var len = format.length;\n    var arr = [];\n    var lastWasEscape = false;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\' && !lastWasEscape) {\n        lastWasEscape = true;\n      } else {\n        arr.push((lastWasEscape ? '\\\\' : '') + format[i]);\n        lastWasEscape = false;\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Parse the characters string into an array, ignoring characters which don't\n   * match the format requirements.\n   * @param {String} characters\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseCharacters = function _parseCharacters(characters) {\n\n    var chars = characters.split('');\n    var i = 0;\n    var len = characters.length;\n    var regexes = [];\n    var arr = [];\n\n    for (; i < len; i++) {\n\n      // Try to build a regex for this format character.\n      try {\n        // Make sure this format starts with an escape character.\n        regexes[i] = this.format[i][0] === '\\\\' ? new RegExp(this.format[i]) : null;\n      } catch (e) {}\n      //\n\n\n      // If we were able to create a regex and our char passes, add it to the array\n      // of characters to return.\n      if (regexes[i] && regexes[i].exec(chars[i])) {\n        arr.push(chars[i]);\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultInputElement = function _createDefaultInputElement() {\n\n    var el = document.createElement('input');\n    el.className = 'spark-input__field';\n    el.setAttribute('data-typeahead', '');\n    el.setAttribute('type', 'tel');\n\n    this.el.appendChild(el);\n\n    return el;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultPlaceholderElement = function _createDefaultPlaceholderElement() {\n    var el = document.createElement('span');\n    el.className = 'spark-input__placeholder';\n    this.el.appendChild(el);\n    return el;\n  };\n\n  /**\n   * Get the maximum number of characters allowed.\n   * @param {Array} format\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCharactersAllowedCount = function _getCharactersAllowedCount(format) {\n\n    var i = 0;\n    var len = format.length;\n    var allowed = 0;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\d') {\n        allowed++;\n      }\n    }\n\n    return allowed;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Typeahead.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onKeydownBound = this._onKeydown.bind(this);\n    this._onInputBound = this._onInput.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onPlaceholderClickBound = this._onPlaceholderClick.bind(this);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._addEventListeners = function _addEventListeners() {\n    this.inputEl.addEventListener('keydown', this._onKeydownBound, false);\n    this.inputEl.addEventListener('input', this._onInputBound, false);\n    this.inputEl.addEventListener('focus', this._onFocusBound, false);\n    this.placeholderEl.addEventListener('click', this._onPlaceholderClickBound, false);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.inputEl.removeEventListener('keydown', this._onKeydownBound);\n    this.inputEl.removeEventListener('input', this._onInputBound);\n    this.inputEl.removeEventListener('focus', this._onFocusBound);\n    this.placeholderEl.removeEventListener('click', this._onPlaceholderClickBound);\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n  };\n\n  /**\n   * Get the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretStart = function _getCaretStart() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        caretPosition = this.inputEl.selectionStart;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Get the end position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretEnd = function _getCaretEnd() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionEnd || this.inputEl.selectionEnd === 0) {\n        caretPosition = this.inputEl.selectionEnd;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Is the caret at the end of the input?\n   * @return {Boolean}\n   */\n\n\n  Typeahead.prototype._caretIsAtEnd = function _caretIsAtEnd() {\n    return this._getCaretStart() === this.maxLength;\n  };\n\n  /**\n   * Set the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._setCaretPosition = function _setCaretPosition(pos) {\n\n    return this._maintainFocus(function () {\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        sel.moveStart('character', pos);\n        sel.moveEnd('character', 0);\n        sel.select();\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        this.inputEl.selectionStart = pos;\n        this.inputEl.selectionEnd = pos;\n      }\n    });\n  };\n\n  /**\n   * Get the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretPositionTranslated = function _getCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    return pos - skipCount;\n  };\n\n  /**\n   * Get the starting position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretStartTranslated = function _getCaretStartTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretStart());\n  };\n\n  /**\n   * Get the ending position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretEndTranslated = function _getCaretEndTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretEnd());\n  };\n\n  /**\n   * Set the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype._setCaretPositionTranslated = function _setCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos + skipCount; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== undefined && this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    this._setCaretPosition(pos + skipCount);\n  };\n\n  /**\n   * Move the caret position\n   * @param  {String} direction The direction of the movement\n   * @return {Boolean}           Was the caret actually moved?\n   */\n\n\n  Typeahead.prototype._moveCaret = function _moveCaret(direction) {\n\n    var curPos = this._getCaretStart();\n\n    if (direction === 'left') {\n      this._setCaretPosition(curPos - 1);\n    } else if (direction === 'right') {\n      this._setCaretPosition(curPos + 1);\n    }\n\n    return curPos !== this._getCaretStart();\n  };\n\n  /**\n   * Empty the input when we only have placeholders.\n   */\n\n\n  Typeahead.prototype._emptyWhenOnlyPlaceholders = function _emptyWhenOnlyPlaceholders() {\n    if (!this.characters.length) {\n      this.clear();\n    }\n  };\n\n  /**\n   * Run a callback function that may change the focus of the document, but\n   * make sure focus goes back to where it needs to be. Also, set the state\n   * so that blur/focus events don't fire from this instance.\n   * @param {Function} callback\n   */\n\n\n  Typeahead.prototype._maintainFocus = function _maintainFocus(callback) {\n\n    this.pause();\n\n    var originalActiveElement = document.activeElement;\n\n    //For IE\n    if (!originalActiveElement) {\n      originalActiveElement = document.body;\n    }\n\n    var output = (callback || noop).call(this);\n\n    // If we didn't have focus, go back to focusing on the original\n    if (originalActiveElement !== this.inputEl) {\n      this.inputEl.blur();\n      originalActiveElement.focus();\n    }\n\n    this.resume();\n\n    return output;\n  };\n\n  /**\n   * Update the width of the typeahead. If we should be matching the width\n   * of the placeholder, do so. Otherwise, take no action.\n   */\n\n\n  Typeahead.prototype._updateWidth = function _updateWidth() {\n\n    if (this.matchPlaceholderSize) {\n      this.placeholderEl.style.width = 'auto';\n      // Add 2px to account for caret width in IE...\n      this.inputEl.style.width = 'auto';\n      this.inputEl.style.width = this.placeholderEl.offsetWidth + 2 + 'px';\n      this.placeholderEl.style.width = '';\n    }\n  };\n\n  /**\n   * Listen for delete and arrows.\n   * @param  {Object} e\n   */\n\n\n  Typeahead.prototype._onKeydown = function _onKeydown(e) {\n\n    var code = e.keyCode || e.which;\n\n    if (code === this.pasteCode && (e.metaKey || e.ctrlKey)) {\n      return;\n    }\n\n    if (code === this.actionCodes.BACKSPACE) {\n      this.removeCharacterAtCaret(-1);\n      this._onBackspace();\n      e.preventDefault();\n    } else if (code === this.actionCodes.DELETE) {\n      this.removeCharacterAtCaret(0);\n      e.preventDefault();\n    } else if (code === this.actionCodes.LEFT) {\n      if (!this._getCaretStart()) {\n        (this.onBackspace || noop)();\n      }\n    } else if (code === this.actionCodes.RIGHT) {\n      if (this._getCaretStart() === this.characters.length) {\n        (this.onEnd || noop)();\n      }\n    } else {\n      if (this.ignoreCodes.indexOf(code) === -1) {\n        e.preventDefault();\n        this.addCharacterAtCaret(String.fromCharCode(code));\n      }\n    }\n  };\n\n  /**\n   * When the input event fires, validate. This happens\n   * with a copy+paste.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onInput = function _onInput(e) {\n    e.preventDefault();\n    this.characters = this._parseCharacters(this.inputEl.value);\n    this.run();\n    (this.onInput || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When we focus, run the formatting.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onFocus = function _onFocus() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    window.addEventListener('blur', this._onBlurBound, false);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.addEventListener('blur', this._onBlurBound, false);\n\n    if (this.isFocused || this.pauseBlurFocus || this.isRunning) return;\n\n    this.run();\n    (this.onFocus || noop)(this.getValue(), this);\n    this.isFocused = true;\n    this._oldVal = this.inputEl.value;\n  };\n\n  /**\n   * When we blur, if we have no characters, remove the placeholders.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBlur = function _onBlur() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n\n    this.isFocused = false;\n\n    if (this.pauseBlurFocus || this.isRunning) return;\n\n    this._emptyWhenOnlyPlaceholders();\n\n    if (this._oldVal !== this.inputEl.value) {\n      (0, _triggerEvent2.default)(this.inputEl, 'change');\n    }\n\n    (this.onBlur || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When the placeholder receives a click event, focus on the input. This happens in IE10 for some\n   * reason that I cannot fully fathom, but it has something to do with the explicit width being\n   * set on an empty element.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onPlaceholderClick = function _onPlaceholderClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.inputEl.focus();\n  };\n\n  /**\n   * When we backspace, if we have no characters left let listeners know.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBackspace = function _onBackspace() {\n    if (!this._getCaretStart()) (this.onBackspace || noop)();\n  };\n\n  return Typeahead;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTypeahead.prototype._whitelistedParams = ['format', 'placeholder', 'matchPlaceholderSize', 'onChange', 'onFocus', 'onBlur', 'onInput', 'onBackspace', 'onEnd'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTypeahead.prototype.defaults = {\n  el: null,\n  inputEl: null,\n  placeholderEl: null,\n  placeholder: null,\n  characters: null,\n  format: null,\n  ignoreCodes: [9, // Tab\n  16, // Shift\n  17, // Ctrl\n  18, // Alt\n  20, // CAPS\n  91, // Meta\n  93, // Alt\n  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 // F1-F12\n  ],\n  actionCodes: {\n    BACKSPACE: 8,\n    DELETE: 46,\n    LEFT: 37,\n    RIGHT: 39\n  },\n  pasteCode: 86, // v\n  pauseBlurFocus: 0,\n  matchPlaceholderSize: null,\n  maxLength: null,\n  isFocused: false,\n  isRunning: false,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  onInput: null,\n  onBackspace: null,\n  onEnd: null,\n  _atEnd: false,\n  _oldVal: null,\n  _onInputBound: null,\n  _onKeydownBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onPlaceholderClickBound: null\n};\n\nexports.default = Typeahead;\nmodule.exports = exports['default'];\n//# sourceMappingURL=typeahead.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trigger Event\n * Trigger a DOM event on an element.\n *\n * @param {Element} el\n * @param {String} name\n *\n * @module helpers/dom/trigger-event.js\n */\nfunction triggerEvent(el, name) {\n\n  var event = void 0;\n\n  if (document.createEvent) {\n    event = document.createEvent('HTMLEvents');\n    event.initEvent(name, true, true);\n    event.eventName = name;\n    el.dispatchEvent(event);\n  } else {\n    event = document.createEventObject();\n    event.eventType = name;\n    event.eventName = name;\n    el.fireEvent('on' + event.eventType, event);\n  }\n}\n\nexports.default = triggerEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trigger-event.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}